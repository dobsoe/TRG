<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='mac' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8200.14.0720.2105                                -->
  <preferences>
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.3'>
      <aliases enabled='yes' />
      <column caption='1' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='1.0'>
        <calculation class='tableau' formula='1.0' />
      </column>
      <column alias='Increasing subcategories' caption='IsIncreasing' datatype='integer' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='1'>
        <calculation class='tableau' formula='1' />
        <aliases>
          <alias key='0' value='Declining subcategories' />
          <alias key='1' value='Increasing subcategories' />
        </aliases>
        <members>
          <member alias='Increasing subcategories' value='1' />
          <member alias='Declining subcategories' value='0' />
        </members>
      </column>
      <column caption='Low statistics threshold' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='5.0'>
        <calculation class='tableau' formula='5.0' />
        <range granularity='1.0' max='20.0' min='0.0' />
      </column>
    </datasource>
    <datasource caption='trends 2 (no subcat filter)' inline='true' name='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)' version='8.3'>
      <connection class='greenplum' dbname='demo' expected-driver-version='PostgreSQL Unicode' odbc-native-protocol='yes' port='9999' server='localhost' username='gpadmin'>
        <relation name='trends_master_weekly' table='[ds].[trends_master_weekly]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>numitems</remote-name>
            <remote-type>131</remote-type>
            <local-name>[numitems]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>numitems</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>28</precision>
            <scale>6</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_NUMERIC&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>batch_week</remote-name>
            <remote-type>130</remote-type>
            <local-name>[batch_week]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>batch_week</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[category]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>category</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>subcategory</remote-name>
            <remote-type>130</remote-type>
            <local-name>[subcategory]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>subcategory</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>taxonomiccolour</remote-name>
            <remote-type>130</remote-type>
            <local-name>[taxonomiccolour]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>taxonomiccolour</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>markdown</remote-name>
            <remote-type>3</remote-type>
            <local-name>[markdown]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>markdown</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>newin_7</remote-name>
            <remote-type>3</remote-type>
            <local-name>[newin_7]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>newin_7</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>newin_30</remote-name>
            <remote-type>3</remote-type>
            <local-name>[newin_30]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>newin_30</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>retailername</remote-name>
            <remote-type>130</remote-type>
            <local-name>[retailername]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>retailername</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Counts_sel' datatype='real' name='[Calculation5]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if [Parameters].[Parameter 2] = 1 then WINDOW_SUM(SUM([newin_7]*[numitems]), 0, 0)&#10;elseif [Parameters].[Parameter 2] = 0 then WINDOW_SUM(SUM([markdown]*[numitems]), 0, 0)&#10;else 0&#10;end' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Counts_all' datatype='real' name='[Calculation_7970814111018179]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='WINDOW_SUM(SUM([numitems]), 0, 0)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column caption='Markdown' datatype='integer' name='[markdown]' role='measure' type='quantitative'>
      </column>
      <column caption='Newin 30' datatype='integer' name='[newin_30]' role='measure' type='quantitative'>
      </column>
      <column caption='Newin 7' datatype='integer' name='[newin_7]' role='measure' type='quantitative'>
      </column>
      <column caption='Numitems' datatype='real' name='[numitems]' role='measure' type='quantitative'>
      </column>
      <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
      </column>
      <column caption='Subcategory' datatype='string' name='[subcategory]' role='dimension' type='nominal'>
      </column>
      <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[subcategory]' derivation='None' name='[none:subcategory:nk]' pivot='key' type='nominal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/elliedobson/Documents/Work/Customers/TRG/Code/ExtractedData/trends_master_weekly (ds.trends_master_weekly) (demo) copy 1.tde' schema='Extract' tablename='Extract' update-time='08/18/2014 02:11:29 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='6257681' timestamp-start='2014-08-18 14:11:29.797' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>batch_week</remote-name>
              <remote-type>129</remote-type>
              <local-name>[batch_week]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>batch_week</remote-alias>
              <ordinal>1</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>40</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;2013.44&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;2014.30&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>category</remote-alias>
              <ordinal>2</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>30</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;bags&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;watches&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>country</remote-alias>
              <ordinal>3</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;au&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;us&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>markdown</remote-name>
              <remote-type>16</remote-type>
              <local-name>[markdown]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>markdown</remote-alias>
              <ordinal>4</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>newin_30</remote-name>
              <remote-type>16</remote-type>
              <local-name>[newin_30]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>newin_30</remote-alias>
              <ordinal>5</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>newin_7</remote-name>
              <remote-type>16</remote-type>
              <local-name>[newin_7]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>newin_7</remote-alias>
              <ordinal>6</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>numitems</remote-name>
              <remote-type>4</remote-type>
              <local-name>[numitems]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>numitems</remote-alias>
              <ordinal>7</ordinal>
              <family>trends_master_weekly</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3850</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='real'>1.0</statistic>
                <statistic aggregation='Max' datatype='real'>79736.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>retailername</remote-name>
              <remote-type>129</remote-type>
              <local-name>[retailername]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>retailername</remote-alias>
              <ordinal>8</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>89</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;abercrombie &amp; fitch&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;zara&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>subcategory</remote-name>
              <remote-type>129</remote-type>
              <local-name>[subcategory]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>subcategory</remote-alias>
              <ordinal>9</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>323</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;3/4 lengths&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;wreath &amp; crown&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>taxonomiccolour</remote-name>
              <remote-type>129</remote-type>
              <local-name>[taxonomiccolour]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>taxonomiccolour</remote-alias>
              <ordinal>10</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>16</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;black&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;yellow&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.470244' measure-ordering='alphabetic' measure-percentage='0.376585' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:subcategory:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;fit &amp; flare dress&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;sundress&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;trilby&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;baker boy &amp; news boy&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;cable&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;maxi dress&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;beret&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;eyelash&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;lace dress&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;shirt dress&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;floppy hat&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;skater dress&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;unclassified&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;deerstalker &amp; trapper hat&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;prom dress&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;slim fit&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;cloche&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;pointelle&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;t-shirt dress&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;boater&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;carrot jeans&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;fine gauge&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;wrap&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;kimono&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;sweater &amp; jumper dress&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;turban&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;balaclava&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;bootcut&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;cardigans&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;coat dress&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;tank dress&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;veil &amp; fascinator&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;bodycon dress&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;straw hat&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;ear muffs&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;loose fit jeans&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;sheath dress&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;cossack hat&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;flare jeans&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;pinafore dress&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;poncho&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;slip dress&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;stetson &amp; western&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;western &amp; rider jacket&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;bowler hat&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;fluffy&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;midi dress&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;smock dress&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;drop waist dress&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;strapless dress&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;sun hat&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;fascinator&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;shapewear/shape suits&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;shift dress&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;skinny&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;fedoras&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;straight leg&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;baseball cap&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;chunky&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;party dress&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;tea dress&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;visor&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;bucket hat&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;crop jeans&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;jumpers &amp; sweaters&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;mini dress&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;beanie&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;boyfriend jeans&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;cropped&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;tunic dress&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:subcategory:nk]&#10;[:Measure Names]' type='palette'>
            <map-pri to='multiordinal_blue'>
              <bucket>&quot;boyfriend jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown'>
              <bucket>&quot;flare jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold'>
              <bucket>&quot;bootcut&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray'>
              <bucket>&quot;crop jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green'>
              <bucket>&quot;western &amp; rider jacket&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange'>
              <bucket>&quot;skinny&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink'>
              <bucket>&quot;unclassified&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple'>
              <bucket>&quot;loose fit jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red'>
              <bucket>&quot;carrot jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal'>
              <bucket>&quot;slim fit&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal'>
              <bucket>&quot;straight leg&quot;</bucket>
            </map-pri>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <datasource-dependencies datasource='Parameters'>
        <column alias='Increasing subcategories' caption='IsIncreasing' datatype='integer' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='1'>
          <calculation class='tableau' formula='1' />
          <aliases>
            <alias key='0' value='Declining subcategories' />
            <alias key='1' value='Increasing subcategories' />
          </aliases>
          <members>
            <member alias='Increasing subcategories' value='1' />
            <member alias='Declining subcategories' value='0' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='trends 1' inline='true' name='greenplum.41866.548072407400' version='8.3'>
      <connection class='greenplum' dbname='demo' expected-driver-version='PostgreSQL Unicode' odbc-native-protocol='yes' port='9999' server='localhost' username='gpadmin'>
        <relation name='trends_master_weekly' table='[ds].[trends_master_weekly]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>numitems</remote-name>
            <remote-type>131</remote-type>
            <local-name>[numitems]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>numitems</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>28</precision>
            <scale>6</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_NUMERIC&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>batch_week</remote-name>
            <remote-type>130</remote-type>
            <local-name>[batch_week]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>batch_week</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[category]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>category</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>subcategory</remote-name>
            <remote-type>130</remote-type>
            <local-name>[subcategory]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>subcategory</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>taxonomiccolour</remote-name>
            <remote-type>130</remote-type>
            <local-name>[taxonomiccolour]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>taxonomiccolour</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>markdown</remote-name>
            <remote-type>3</remote-type>
            <local-name>[markdown]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>markdown</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>newin_7</remote-name>
            <remote-type>3</remote-type>
            <local-name>[newin_7]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>newin_7</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>newin_30</remote-name>
            <remote-type>3</remote-type>
            <local-name>[newin_30]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>newin_30</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>retailername</remote-name>
            <remote-type>130</remote-type>
            <local-name>[retailername]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>retailername</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Ratio' datatype='real' default-format='p0.00%' name='[Calculation1 1 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if([Calculation3 1 1]&gt;[Parameters].[Parameter 3]) then (([Calculation3 1 1]/[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation5])/([Calculation1]/[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation_7970814111018179]))&#10;else 0&#10;end' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Counts_all_subcat' datatype='real' default-format='p0.00%' name='[Calculation1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='WINDOW_SUM(SUM([numitems]), 0, 0)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Counts_sel_subcat' datatype='real' default-format='p0.00%' name='[Calculation3 1 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if [Parameters].[Parameter 2] = 1 then WINDOW_SUM(SUM([newin_7]*[numitems]), 0, 0)&#10;elseif [Parameters].[Parameter 2] = 0 then WINDOW_SUM(SUM([markdown]*[numitems]), 0, 0)&#10;else 0&#10;end' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='BinaryRatio' datatype='real' name='[Calculation_0970814164744604]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if [Calculation1 1 1] &gt; 1 then [Calculation1 1 1] else 0 end' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column caption='Markdown' datatype='integer' name='[markdown]' role='measure' type='quantitative'>
      </column>
      <column caption='Newin 30' datatype='integer' name='[newin_30]' role='measure' type='quantitative'>
      </column>
      <column caption='Newin 7' datatype='integer' name='[newin_7]' role='measure' type='quantitative'>
      </column>
      <column caption='Numitems' datatype='real' name='[numitems]' role='measure' type='quantitative'>
      </column>
      <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
      </column>
      <column caption='Subcategory' datatype='string' name='[subcategory]' role='dimension' type='nominal'>
      </column>
      <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[subcategory]' derivation='None' name='[none:subcategory:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/elliedobson/Documents/Work/Customers/TRG/Code/ExtractedData/trends_master_weekly (ds.trends_master_weekly) (demo).tde' schema='Extract' tablename='Extract' update-time='08/18/2014 02:11:29 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='6257681' timestamp-start='2014-08-18 14:11:29.797' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>batch_week</remote-name>
              <remote-type>129</remote-type>
              <local-name>[batch_week]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>batch_week</remote-alias>
              <ordinal>1</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>40</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;2013.44&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;2014.30&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>category</remote-alias>
              <ordinal>2</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>30</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;bags&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;watches&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>country</remote-alias>
              <ordinal>3</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;au&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;us&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>markdown</remote-name>
              <remote-type>16</remote-type>
              <local-name>[markdown]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>markdown</remote-alias>
              <ordinal>4</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>newin_30</remote-name>
              <remote-type>16</remote-type>
              <local-name>[newin_30]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>newin_30</remote-alias>
              <ordinal>5</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>newin_7</remote-name>
              <remote-type>16</remote-type>
              <local-name>[newin_7]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>newin_7</remote-alias>
              <ordinal>6</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>numitems</remote-name>
              <remote-type>4</remote-type>
              <local-name>[numitems]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>numitems</remote-alias>
              <ordinal>7</ordinal>
              <family>trends_master_weekly</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3850</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='real'>1.0</statistic>
                <statistic aggregation='Max' datatype='real'>79736.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>retailername</remote-name>
              <remote-type>129</remote-type>
              <local-name>[retailername]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>retailername</remote-alias>
              <ordinal>8</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>89</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;abercrombie &amp; fitch&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;zara&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>subcategory</remote-name>
              <remote-type>129</remote-type>
              <local-name>[subcategory]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>subcategory</remote-alias>
              <ordinal>9</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>323</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;3/4 lengths&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;wreath &amp; crown&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>taxonomiccolour</remote-name>
              <remote-type>129</remote-type>
              <local-name>[taxonomiccolour]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>taxonomiccolour</remote-alias>
              <ordinal>10</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>16</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;black&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;yellow&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.470244' measure-ordering='alphabetic' measure-percentage='0.376585' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:subcategory:nk]&#10;[:Measure Names]' type='palette'>
            <map-pri to='multiordinal_blue'>
              <bucket>&quot;boyfriend jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown'>
              <bucket>&quot;flare jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold'>
              <bucket>&quot;bootcut&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray'>
              <bucket>&quot;crop jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green'>
              <bucket>&quot;western &amp; rider jacket&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange'>
              <bucket>&quot;skinny&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink'>
              <bucket>&quot;unclassified&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple'>
              <bucket>&quot;loose fit jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red'>
              <bucket>&quot;carrot jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal'>
              <bucket>&quot;slim fit&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal'>
              <bucket>&quot;straight leg&quot;</bucket>
            </map-pri>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[pcto:sum:newin_7:qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[win:sum:newin_7:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[greenplum.41866.548072407400].[usr:Calculation1:qk:1]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:subcategory:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;basketball boots &amp; hi-tops&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;brogues &amp; wing tips&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;clogs&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;cold weather boots&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;fit &amp; flare dress&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;gilets &amp; bodywarmers&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;hawaiian shirt&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;knitted gloves&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;mukluks &amp; moccasin boots&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;nightdress&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;sling back&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;sports&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;sundress&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;trilby&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;umbrella &amp; parasol&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;woven scarf&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;3/4 lengths&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;baker boy &amp; news boy&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;boyfriend coat&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;cable&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;cargo trousers&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;cosmetic bag&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;flat boots&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;henley shirt&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;loungewear &quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;maxi dress&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;mid-heeled boots&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;oxfords&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;shopper&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;sports sandal&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;wayfarer&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;wrap scarf&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;ankle boots&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;beret&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;bralets&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;chelsea boots&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;cowboy boots&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;duffle coat&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;eyelash&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;high-heeled shoes&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;lace dress&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;leather gloves&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;midi skirt&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;parka&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;riding boots&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;shirt dress&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;swing coat&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;tennis shoes&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;bandeau top&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;bodysuit&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;calf length boots&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;denim skirts&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;fine jewellery&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;floppy hat&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;hair clips&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;loungewear&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;muff&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;playsuit &amp; romper suit&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;sheepskin &amp; shearling boots&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;skater dress&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;suspenders &amp; braces&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;tulip skirts&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;unclassified&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;wide belt&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;belt bag, fanny pack &amp; bumbag&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;block-heeled boots&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;brothel creepers &amp; flatforms&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;dancing shoes&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;deerstalker &amp; trapper hat&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;fleece sweatshirt&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;jeans belt&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;loafers&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;mirrored eyewear&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;printed scarf&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;prom dress&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;satchel &amp; messenger&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;slim fit&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;sunglasses&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;trench coat&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;wedge shoes&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;aviators&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;block heel sandal&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;circle skirts&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;cloche&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;culottes&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;embellished belt&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;hosiery&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;leggings &amp; knit bottoms&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;necklaces&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;pegleg trousers&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;pointelle&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;safari jacket&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;t-shirt dress&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;tank top&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;track &amp; sweatpants&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;wedge boots&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;ankle strap&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;biker jacket&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;boater&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;carrot jeans&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;chemise&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;drawstring bag&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;dungaree &amp; overalls&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;fine gauge&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;hobo bag&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;leather jacket&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;military coat&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;pouch&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;riding jacket&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;swing top&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;thigh-high boots&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;wrap&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;baskets&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;bowling bag&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;cargo shorts&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;corsets &amp; bustier&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;flares&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;headbands&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;kimono&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;knitted scarf&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;maxiskirt&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;oversized eyewear&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;shoe boots &amp; booties&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;sports gloves&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;sweater &amp; jumper dress&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;turban&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;wax jacket&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;alice bands&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;balaclava&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;bootcut&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;brooches, badges &amp; pins&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;cardigans&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;clutch bag&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;coat dress&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;document holder &amp; portfolio case&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;driving gloves&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;hidden heel&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;lace gloves&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;mid-heeled sandals&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;padded &amp; down coat&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;shoulder &amp; cross body bag&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;sports watch&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;tank dress&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;veil &amp; fascinator&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;vests&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;wrap skirt&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;biker coat&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;bodycon dress&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;bomber &amp; blouson jacket&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;cape&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;digital&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;fingerless gloves&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;harem pants&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;kimono top&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;macintosh &amp; rain coat&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;purse &amp; wallet&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;shell top&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;snowboots&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;straw hat&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;waist cincher&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;work boots&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;biker boots&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;board shorts&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;bubble &amp; puff skirt&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;deck &amp; boat shoes&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;ear muffs&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;flip-flops &amp; thongs&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;gladiator sandals&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;jodhpurs&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;loose fit jeans&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;mittens&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;platform boots&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;sheath dress&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;skater skirts&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;slip-ons&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;visors&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;wellington boots&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;backpack&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;block heel shoe&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;city shorts&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;cossack hat&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;cut out boots&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;espadrilles&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;flare jeans&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;hot pants&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;lightweight scarf&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;miniskirts&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;pencil skirts&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;pinafore dress&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;poncho&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;sarongs&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;tankini&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;trainers &amp; sneakers&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;wedge sandals&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;bangles &amp; cuffs&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;bolero&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;camisoles&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;desert &amp; chukka boots&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;fine watch&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;hair ties&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;kimono coat&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;luggage &amp; suitcase&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;plimsolls&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;shell jacket&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;slip dress&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;snood&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;stetson &amp; western&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;tunic&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;western &amp; rider jacket&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;wide leg pants&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;anklets&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;bikinis/two-piece&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;bowler hat&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;chino&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;crop top&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;flat shoes&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;fluffy&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;holdall,weekend &amp; overnight bag&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;leather shorts&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;midi dress&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;military jacket&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;pea &amp; reefer jacket&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;rings&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;smock dress&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;strapless top&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;tiara&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;baseball varsity jacket&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;briefs &amp; panties&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;card holder&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;cocoon coat&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;drop waist dress&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;fur &amp; faux fur coat&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;harrington &amp; golf jacket&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;knee-high boots&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;mary janes&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;polo shirt&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;skorts&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;spectacles &amp; glasses&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;strapless dress&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;sun hat&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;walking &amp; hiking boots&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;worker &amp; utility jacket&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;ballerina pumps &amp; ballet flats&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;bras&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;classic&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;dressing gowns &amp; robes &quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;fascinator&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;formal&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;grab bag&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;long length gloves&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;moccasins&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;platform sandals&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;shapewear/shape suits&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;shawl&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;shift dress&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;skinny&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;slippers&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;trunks&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;bandeau&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;briefcases&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;clog boots&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;denim shorts&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;fedoras&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;frame bag&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;gypsy skirts&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;keyring&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;monk shoes&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;platform shoes&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;skinny belt&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;slouch boots&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;straight leg&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;tube skirt&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;western shirt&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;all-in-one&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;baseball cap&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;boyfriend shirt&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;cat-eye&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;chunky&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;court shoes &amp; pumps&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;flat sandals&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;high-heeled boots&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;lace-up boots&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;mid-heeled shoes&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;padded jacket&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;party dress&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;slip&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;swimsuits/one-piece&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;tea dress&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;tech covers&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;visor&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;wreath &amp; crown&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;anorak&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;blazer &amp; sportcoat&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;bucket hat&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;clutch bag - hard&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;crop jeans&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;dressing gowns &amp; robes&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;earrings&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;hoodies &amp; track tops&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;jumpers &amp; sweaters&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;leather skirts&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;military shirt&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;mini dress&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;peasant blouse&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;running shoes&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;t-shirts &amp; tee&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;tote&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;analog&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;beanie&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;boyfriend jeans&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;bracelets&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;charms&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;cover-ups&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;cropped&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;duffel bag&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;high-heeled sandals&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;laptop &amp; tablet bag&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;mules&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;para &amp; army boots&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;pyjamas&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;stole &amp; fur scarf&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;teddie&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;tunic dress&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <datasource-dependencies datasource='Parameters'>
        <column alias='Increasing subcategories' caption='IsIncreasing' datatype='integer' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='1'>
          <calculation class='tableau' formula='1' />
          <aliases>
            <alias key='0' value='Declining subcategories' />
            <alias key='1' value='Increasing subcategories' />
          </aliases>
          <members>
            <member alias='Increasing subcategories' value='1' />
            <member alias='Declining subcategories' value='0' />
          </members>
        </column>
        <column caption='Low statistics threshold' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='5.0'>
          <calculation class='tableau' formula='5.0' />
          <range granularity='1.0' max='20.0' min='0.0' />
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
        <column caption='Counts_sel' datatype='real' name='[Calculation5]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='if [Parameters].[Parameter 2] = 1 then WINDOW_SUM(SUM([newin_7]*[numitems]), 0, 0)&#10;elseif [Parameters].[Parameter 2] = 0 then WINDOW_SUM(SUM([markdown]*[numitems]), 0, 0)&#10;else 0&#10;end' scope-isolation='false'>
            <table-calc ordering-type='Rows' />
          </calculation>
        </column>
        <column caption='Counts_all' datatype='real' name='[Calculation_7970814111018179]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='WINDOW_SUM(SUM([numitems]), 0, 0)' scope-isolation='false'>
            <table-calc ordering-type='Rows' />
          </calculation>
        </column>
        <column-instance column='[Calculation5]' derivation='User' name='[usr:Calculation5:qk]' pivot='key' type='quantitative'>
          <table-calc ordering-type='Rows' />
        </column-instance>
        <column-instance column='[Calculation_7970814111018179]' derivation='User' name='[usr:Calculation_7970814111018179:qk]' pivot='key' type='quantitative'>
          <table-calc ordering-type='Rows' />
        </column-instance>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <datasource-relationships>
    <datasource-dependencies datasource='greenplum.41866.548072407400'>
      <column datatype='string' name='[batch_week]' role='dimension' type='nominal'>
      </column>
      <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column-instance column='[batch_week]' derivation='None' name='[none:batch_week:nk]' pivot='key' type='nominal' />
      <column-instance column='[category]' derivation='None' name='[none:category:nk]' pivot='key' type='nominal' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <column-instance column='[retailername]' derivation='None' name='[none:retailername:nk]' pivot='key' type='nominal' />
      <column-instance column='[taxonomiccolour]' derivation='None' name='[none:taxonomiccolour:nk]' pivot='key' type='nominal' />
      <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
      </column>
      <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
      </column>
    </datasource-dependencies>
    <datasource-dependencies datasource='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
      <column datatype='string' name='[batch_week]' role='dimension' type='nominal'>
      </column>
      <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column-instance column='[batch_week]' derivation='None' name='[none:batch_week:nk]' pivot='key' type='nominal' />
      <column-instance column='[category]' derivation='None' name='[none:category:nk]' pivot='key' type='nominal' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <column-instance column='[retailername]' derivation='None' name='[none:retailername:nk]' pivot='key' type='nominal' />
      <column-instance column='[taxonomiccolour]' derivation='None' name='[none:taxonomiccolour:nk]' pivot='key' type='nominal' />
      <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
      </column>
      <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
      </column>
    </datasource-dependencies>
    <datasource-relationship source='greenplum.41866.548072407400' target='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
      <column-mapping>
        <map key='[greenplum.41866.548072407400].[none:batch_week:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:batch_week:nk]' />
        <map key='[greenplum.41866.548072407400].[none:category:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:category:nk]' />
        <map key='[greenplum.41866.548072407400].[none:country:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:country:nk]' />
        <map key='[greenplum.41866.548072407400].[none:retailername:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:retailername:nk]' />
        <map key='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:taxonomiccolour:nk]' />
      </column-mapping>
    </datasource-relationship>
    <datasource-relationship source='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)' target='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
      <column-mapping>
        <map key='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:batch_week:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:batch_week:nk]' />
        <map key='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:category:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:category:nk]' />
        <map key='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:country:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:country:nk]' />
        <map key='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:retailername:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:retailername:nk]' />
        <map key='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:taxonomiccolour:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:taxonomiccolour:nk]' />
      </column-mapping>
    </datasource-relationship>
  </datasource-relationships>
  <worksheets>
    <worksheet name='CondensedRatio'>
      <layout-options>
        <title>
          <formatted-text>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='trends 1' name='greenplum.41866.548072407400' />
            <datasource caption='trends 2 (no subcat filter)' name='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='greenplum.41866.548072407400'>
            <column caption='BinaryRatio' datatype='real' name='[Calculation_0970814164744604]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='if [Calculation1 1 1] &gt; 1 then [Calculation1 1 1] else 0 end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[batch_week]' role='dimension' type='nominal'>
            </column>
            <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column-instance column='[batch_week]' derivation='None' name='[none:batch_week:nk]' pivot='key' type='nominal' />
            <column-instance column='[category]' derivation='None' name='[none:category:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[retailername]' derivation='None' name='[none:retailername:nk]' pivot='key' type='nominal' />
            <column-instance column='[subcategory]' derivation='None' name='[none:subcategory:nk]' pivot='key' type='nominal' />
            <column-instance column='[taxonomiccolour]' derivation='None' name='[none:taxonomiccolour:nk]' pivot='key' type='nominal' />
            <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
            </column>
            <column caption='Subcategory' datatype='string' name='[subcategory]' role='dimension' type='nominal'>
            </column>
            <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_0970814164744604]' derivation='User' name='[usr:Calculation_0970814164744604:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[greenplum.41866.548072407400].[Calculation3 1 1]' ordering-type='Rows' />
              <table-calc field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation_7970814111018179]' ordering-type='Rows' />
              <table-calc field='[greenplum.41866.548072407400].[Calculation1 1 1]' ordering-type='Rows' />
              <table-calc field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation5]' ordering-type='Rows' />
              <table-calc field='[greenplum.41866.548072407400].[Calculation1]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
            <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:category:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:category:nk]' member='&quot;jeans&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:country:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;uk&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:retailername:nk]' filter-group='6'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;bhs&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;debenhams&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;house of fraser&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;john lewis&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;selfridges&quot;' />
            </groupfilter>
          </filter>
          <sort class='alphabetic' column='[greenplum.41866.548072407400].[none:retailername:nk]' direction='ASC' />
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:subcategory:nk]' filter-group='7'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:subcategory:nk]' member='&quot;boyfriend jeans&quot;' />
              <groupfilter function='member' level='[none:subcategory:nk]' member='&quot;carrot jeans&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:taxonomiccolour:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[greenplum.41866.548072407400].[none:country:nk]</column>
            <column>[greenplum.41866.548072407400].[none:category:nk]</column>
            <column>[greenplum.41866.548072407400].[none:taxonomiccolour:nk]</column>
            <column>[greenplum.41866.548072407400].[none:retailername:nk]</column>
            <column>[greenplum.41866.548072407400].[none:subcategory:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='render-fold-reversed' value='true' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[greenplum.41866.548072407400].[none:retailername:nk]' value='296' />
            <format attr='border-style' data-class='subtotal' scope='cols' value='none' />
            <format attr='border-style' data-class='subtotal' scope='rows' value='none' />
          </style-rule>
          <style-rule element='field-labels-decoration'>
            <format attr='text-orientation' value='-90' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[greenplum.41866.548072407400].[none:batch_week:nk]' value='false' />
            <format attr='font-size' field='[greenplum.41866.548072407400].[none:retailername:nk]' value='12' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='subtotal' scope='cols' value='none' />
            <format attr='border-style' data-class='subtotal' scope='rows' value='none' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#cde5bc' />
            <format attr='fill-below' id='refline0' value='#ebd1d1' />
            <format attr='stroke-color' id='refline0' value='#000000' />
            <format attr='line-pattern' id='refline0' value='dashed' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
            <format attr='line-pattern' scope='rows' value='none' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[greenplum.41866.548072407400].[none:subcategory:nk]' value='Possible subcategories&#10;' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[greenplum.41866.548072407400].[none:subcategory:nk]' />
              <size column='[greenplum.41866.548072407400].[usr:Calculation_0970814164744604:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[greenplum.41866.548072407400].[none:retailername:nk]</rows>
        <cols>[greenplum.41866.548072407400].[none:batch_week:nk]</cols>
        <join-lod-include-overrides>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[category]</column>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[country]</column>
        </join-lod-include-overrides>
        <show-full-range>
          <column>[greenplum.41866.548072407400].[batch_date]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Counts_all'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='0'>Product counts </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='trends 1' name='greenplum.41866.548072407400' />
            <datasource caption='trends 2 (no subcat filter)' name='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='1' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='1.0'>
              <calculation class='tableau' formula='1.0' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='greenplum.41866.548072407400'>
            <column caption='Counts_all_subcat' datatype='real' default-format='p0.00%' name='[Calculation1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='WINDOW_SUM(SUM([numitems]), 0, 0)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Counts_sel_subcat' datatype='real' default-format='p0.00%' name='[Calculation3 1 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='if [Parameters].[Parameter 2] = 1 then WINDOW_SUM(SUM([newin_7]*[numitems]), 0, 0)&#10;elseif [Parameters].[Parameter 2] = 0 then WINDOW_SUM(SUM([markdown]*[numitems]), 0, 0)&#10;else 0&#10;end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[batch_week]' role='dimension' type='nominal'>
            </column>
            <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column-instance column='[batch_week]' derivation='None' name='[none:batch_week:nk]' pivot='key' type='nominal' />
            <column-instance column='[category]' derivation='None' name='[none:category:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[retailername]' derivation='None' name='[none:retailername:nk]' pivot='key' type='nominal' />
            <column-instance column='[subcategory]' derivation='None' name='[none:subcategory:nk]' pivot='key' type='nominal' />
            <column-instance column='[taxonomiccolour]' derivation='None' name='[none:taxonomiccolour:nk]' pivot='key' type='nominal' />
            <column caption='Numitems' datatype='real' name='[numitems]' role='measure' type='quantitative'>
            </column>
            <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
            </column>
            <column caption='Subcategory' datatype='string' name='[subcategory]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[numitems]' derivation='Sum' name='[sum:numitems:qk]' pivot='key' type='quantitative' />
            <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation3 1 1]' derivation='User' name='[usr:Calculation3 1 1:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
            <column caption='Counts_sel' datatype='real' name='[Calculation5]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='if [Parameters].[Parameter 2] = 1 then WINDOW_SUM(SUM([newin_7]*[numitems]), 0, 0)&#10;elseif [Parameters].[Parameter 2] = 0 then WINDOW_SUM(SUM([markdown]*[numitems]), 0, 0)&#10;else 0&#10;end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Counts_all' datatype='real' name='[Calculation_7970814111018179]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='WINDOW_SUM(SUM([numitems]), 0, 0)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
            </column>
            <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation5]' derivation='User' name='[usr:Calculation5:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_7970814111018179]' derivation='User' name='[usr:Calculation_7970814111018179:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:category:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:category:nk]' member='&quot;jeans&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:country:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;uk&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:retailername:nk]' filter-group='6'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;bhs&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;debenhams&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;house of fraser&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;john lewis&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;selfridges&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:subcategory:nk]' filter-group='7'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:subcategory:nk]' member='&quot;boyfriend jeans&quot;' />
              <groupfilter function='member' level='[none:subcategory:nk]' member='&quot;carrot jeans&quot;' />
            </groupfilter>
          </filter>
          <sort class='computed' column='[greenplum.41866.548072407400].[none:subcategory:nk]' direction='ASC' using='[greenplum.41866.548072407400].[sum:numitems:qk]'>
          </sort>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:taxonomiccolour:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[greenplum.41866.548072407400].[none:country:nk]</column>
            <column>[greenplum.41866.548072407400].[none:category:nk]</column>
            <column>[greenplum.41866.548072407400].[none:taxonomiccolour:nk]</column>
            <column>[greenplum.41866.548072407400].[none:retailername:nk]</column>
            <column>[greenplum.41866.548072407400].[none:subcategory:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[greenplum.41866.548072407400].[none:batch_week:nk]' value='71' />
            <format attr='display' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' scope='rows' value='false' />
            <format attr='subtitle' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' scope='rows' value='true' />
            <format attr='display' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' scope='rows' value='false' />
            <format attr='render-fold-reversed' value='true' />
            <format attr='display' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='title' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' scope='rows' value='Expected: Counts (all)' />
            <format attr='subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' scope='rows' value='true' />
            <format attr='subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' scope='rows' value='true' />
            <format attr='display' class='0' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' field-type='quantitative' fold='true' scale='log' scope='rows' synchronized='true' type='space' />
            <format attr='title' class='0' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' scope='rows' value='Observed: Counts(newins)' />
            <format attr='width' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' value='64' />
            <format attr='width' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' value='64' />
            <format attr='width' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' value='64' />
            <format attr='width' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' value='64' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
          </style-rule>
          <style-rule element='header'>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-style' scope='cols' value='none' />
            <format attr='border-style' data-class='subtotal' value='none' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[greenplum.41866.548072407400].[none:batch_week:nk]' value='-90' />
            <format attr='text-format' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' value='N' />
            <format attr='text-format' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' value='N' />
            <format attr='text-format' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' value='N' />
            <format attr='text-format' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' value='N' />
            <format attr='display' field='[greenplum.41866.548072407400].[none:batch_week:nk]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[Parameters].[Parameter 1]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#cacaca</color>
                <color>#b5b5b5</color>
                <color>#a1a1a1</color>
                <color>#8d8d8d</color>
                <color>#797979</color>
                <color>#646464</color>
                <color>#505050</color>
                <color>#3c3c3c</color>
                <color>#282828</color>
                <color>#141414</color>
                <color>#000000</color>
              </color-palette>
            </encoding>
            <encoding attr='color' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' max='0.0' min='0.0' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#000000</color>
                <color>#212121</color>
                <color>#434343</color>
                <color>#656565</color>
                <color>#868686</color>
                <color>#a8a8a8</color>
                <color>#cacaca</color>
                <color>#a8a8a8</color>
                <color>#868686</color>
                <color>#646464</color>
                <color>#434343</color>
                <color>#212121</color>
                <color>#000000</color>
              </color-palette>
            </encoding>
            <encoding attr='color' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' max='0.0' min='0.0' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#000000</color>
                <color>#212121</color>
                <color>#434343</color>
                <color>#656565</color>
                <color>#868686</color>
                <color>#a8a8a8</color>
                <color>#cacaca</color>
                <color>#a8a8a8</color>
                <color>#868686</color>
                <color>#646464</color>
                <color>#434343</color>
                <color>#212121</color>
                <color>#000000</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-color' value='#000000' />
            <format attr='border-width' value='1' />
            <format attr='border-style' value='none' />
            <format attr='border-style' data-class='subtotal' value='none' />
            <format attr='border-style' data-class='total' value='none' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='stroke-color' id='refline0' value='#000000' />
            <format attr='line-pattern' id='refline0' value='dashed' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='solid' />
            <format attr='line-pattern' scope='rows' value='solid' />
          </style-rule>
          <style-rule element='header-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='solid' />
          </style-rule>
          <style-rule element='title'>
            <format attr='border-style' value='none' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[greenplum.41866.548072407400].[none:country:nk]' value='Country&#10;'>
              <formatted-text>
                <run>Country&#10;</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='17'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#820000' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1539' />
                <format attr='maxwidth' value='1539' />
                <format attr='minheight' value='216' />
                <format attr='maxheight' value='216' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='26' y-axis-name='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#820000' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1539' />
                <format attr='maxwidth' value='1539' />
                <format attr='minheight' value='294' />
                <format attr='maxheight' value='294' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='27' y-axis-name='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#820000' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1539' />
                <format attr='maxwidth' value='1539' />
                <format attr='minheight' value='216' />
                <format attr='maxheight' value='216' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='30' y-axis-name='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[greenplum.41866.548072407400].[none:subcategory:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#820000' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1539' />
                <format attr='maxwidth' value='1539' />
                <format attr='minheight' value='216' />
                <format attr='maxheight' value='216' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='31' y-axis-name='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[greenplum.41866.548072407400].[none:subcategory:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#820000' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1539' />
                <format attr='maxwidth' value='1539' />
                <format attr='minheight' value='216' />
                <format attr='maxheight' value='216' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([greenplum.41866.548072407400].[usr:Calculation1:qk:1] + ([trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk] + ([greenplum.41866.548072407400].[usr:Calculation3 1 1:qk] + [trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk])))</rows>
        <cols>[greenplum.41866.548072407400].[none:batch_week:nk]</cols>
        <join-lod-include-overrides>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[category]</column>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[country]</column>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[retailername]</column>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[taxonomiccolour]</column>
        </join-lod-include-overrides>
        <percentages enabled='true' mode='row' />
      </table>
    </worksheet>
    <worksheet name='Ratio'>
      <table>
        <view>
          <datasources>
            <datasource caption='trends 1' name='greenplum.41866.548072407400' />
            <datasource caption='trends 2 (no subcat filter)' name='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='greenplum.41866.548072407400'>
            <column caption='Ratio' datatype='real' default-format='p0.00%' name='[Calculation1 1 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='if([Calculation3 1 1]&gt;[Parameters].[Parameter 3]) then (([Calculation3 1 1]/[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation5])/([Calculation1]/[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation_7970814111018179]))&#10;else 0&#10;end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[batch_week]' role='dimension' type='nominal'>
            </column>
            <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column-instance column='[batch_week]' derivation='None' name='[none:batch_week:nk]' pivot='key' type='nominal' />
            <column-instance column='[category]' derivation='None' name='[none:category:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[retailername]' derivation='None' name='[none:retailername:nk]' pivot='key' type='nominal' />
            <column-instance column='[subcategory]' derivation='None' name='[none:subcategory:nk]' pivot='key' type='nominal' />
            <column-instance column='[taxonomiccolour]' derivation='None' name='[none:taxonomiccolour:nk]' pivot='key' type='nominal' />
            <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
            </column>
            <column caption='Subcategory' datatype='string' name='[subcategory]' role='dimension' type='nominal'>
            </column>
            <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation1 1 1]' derivation='User' name='[usr:Calculation1 1 1:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation_7970814111018179]' ordering-type='Rows' />
              <table-calc field='[greenplum.41866.548072407400].[Calculation3 1 1]' ordering-type='Rows' />
              <table-calc field='[greenplum.41866.548072407400].[Calculation1]' ordering-type='Rows' />
              <table-calc field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation5]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:category:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:category:nk]' member='&quot;jeans&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:country:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;uk&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:retailername:nk]' filter-group='6'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;bhs&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;debenhams&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;house of fraser&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;john lewis&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;selfridges&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:subcategory:nk]' filter-group='7'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:subcategory:nk]' member='&quot;boyfriend jeans&quot;' />
              <groupfilter function='member' level='[none:subcategory:nk]' member='&quot;carrot jeans&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:taxonomiccolour:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[greenplum.41866.548072407400].[none:retailername:nk]</column>
            <column>[greenplum.41866.548072407400].[none:taxonomiccolour:nk]</column>
            <column>[greenplum.41866.548072407400].[none:subcategory:nk]</column>
            <column>[greenplum.41866.548072407400].[none:category:nk]</column>
            <column>[greenplum.41866.548072407400].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' scope='rows' value='Ratio: Expected/Observed' />
            <format attr='subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' scope='rows' value='true' />
            <format attr='width' field='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' value='64' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' value='N' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='stroke-color' id='refline0' value='#000000' />
            <format attr='line-pattern' id='refline0' value='dashed' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[greenplum.41866.548072407400].[none:subcategory:nk]' />
            </encodings>
            <reference-line axis-column='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' formula='average' id='refline0' label='Expected=Observed' label-type='custom' scope='per-pane' value-column='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' z-order='1' />
          </pane>
        </panes>
        <rows>[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]</rows>
        <cols>[greenplum.41866.548072407400].[none:batch_week:nk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Trends Analysis'>
      <style>
        <style-rule element='dash-subtitle'>
          <format attr='background-color' value='#00000000' />
        </style-rule>
        <style-rule element='dash-container'>
          <format attr='border-style' id='dash-zone_6' value='none' />
        </style-rule>
        <style-rule element='parameter-ctrl'>
          <format attr='font-size' value='12' />
          <format attr='background-color' value='#ffffff' />
        </style-rule>
        <style-rule element='parameter-ctrl-title'>
          <format attr='font-size' value='12' />
        </style-rule>
      </style>
      <zones>
        <zone h='100000' id='34' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='43377' id='19' name='Counts_all' w='87735' x='12265' y='0'>
          </zone>
          <zone fixed-size='291' h='74928' id='6' is-fixed='true' param='vert' type='layout-flow' w='12265' x='0' y='0'>
            <zone fixed-size='77' h='11835' id='22' is-fixed='true' name='Counts_all' param='[greenplum.41866.548072407400].[none:country:nk]' type='filter' w='12265' x='0' y='0'>
            </zone>
            <zone fixed-size='48' h='7447' id='23' is-fixed='true' name='Counts_all' param='[greenplum.41866.548072407400].[none:category:nk]' type='filter' w='12265' x='0' y='11835'>
            </zone>
            <zone fixed-size='44' h='6915' id='25' is-fixed='true' name='Counts_all' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='filter' w='12265' x='0' y='19282'>
            </zone>
            <zone fixed-size='41' h='6516' id='26' is-fixed='true' name='Counts_all' param='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' type='filter' w='12265' x='0' y='26197'>
            </zone>
            <zone fixed-size='51' h='7846' id='27' is-fixed='true' name='Counts_all' param='[greenplum.41866.548072407400].[none:retailername:nk]' type='filter' w='12265' x='0' y='32713'>
            </zone>
            <zone fixed-size='81' h='11835' id='32' is-fixed='true' param='[Parameters].[Parameter 3]' type='paramctrl' w='12265' x='0' y='40559'>
              <formatted-text>
                <run fontsize='8'>Low statistics threshold</run>
              </formatted-text>
            </zone>
            <zone h='8245' id='35' name='Ratio' pane-specification-id='0' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='color' w='12265' x='0' y='52394'>
            </zone>
          </zone>
          <zone h='31551' id='33' name='Ratio' w='87735' x='12265' y='43377'>
          </zone>
          <zone h='25072' id='30' name='CondensedRatio' w='100000' x='0' y='74928'>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows show-side-pane='false'>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Counts_all'>
      <cards>
        <edge name='left'>
          <strip size='270'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='27' param='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' type='color' />
            <card pane-specification-id='26' param='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='50'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[greenplum.41855.572053194400 (copy)].[:Measure Names]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:Calculation_2550806181752437:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:category:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:country:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:facetbrand:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:newin_7:qk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:retailername:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:subcategory:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:taxonomiccolour:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[yr:batch_date:ok]</field>
          <field>[greenplum.41864.699977557900].[none:retailername:nk]</field>
          <field>[greenplum.41866.548072407400].[none:batch_week:nk]</field>
          <field>[greenplum.41866.548072407400].[none:subcategory:nk]</field>
          <field>[greenplum.41866.548072407400].[none:week:qk]</field>
          <field>[greenplum.41866.548072407400].[none:year:qk]</field>
          <field>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:batch_week:nk]</field>
          <field>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CondensedRatio'>
      <cards>
        <edge name='left'>
          <strip size='270'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='50'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Parameter 4]</field>
          <field>[greenplum.41855.572053194400 (copy)].[:Measure Names]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:Calculation_2550806181752437:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:category:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:country:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:facetbrand:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:newin_7:qk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:retailername:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:subcategory:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:taxonomiccolour:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[yr:batch_date:ok]</field>
          <field>[greenplum.41864.699977557900].[none:retailername:nk]</field>
          <field>[greenplum.41864.699977557900].[twk:batch_date:ok]</field>
          <field>[greenplum.41864.699977557900].[twk:batch_date:qk]</field>
          <field>[greenplum.41866.548072407400].[none:batch_week:nk]</field>
          <field>[greenplum.41866.548072407400].[none:subcategory:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ratio'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[greenplum.41866.548072407400].[none:batch_week:nk]</field>
          <field>[greenplum.41866.548072407400].[none:subcategory:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='1' name='Trends Analysis'>
      <active id='27' />
      <zones>
        <zone name='Counts_all'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[greenplum.41864.699977557900].[none:subcategory:nk]</field>
            </color-one-way>
          </highlight>
        </zone>
        <zone mode='radiolist' name='Counts_all' param='[greenplum.41866.548072407400].[none:country:nk]' show-all='false' type='filter' />
        <zone mode='dropdown' name='Counts_all' param='[greenplum.41866.548072407400].[none:category:nk]' type='filter' />
        <zone mode='checkdropdown' name='Counts_all' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='filter' values='relevant' />
        <zone mode='checkdropdown' name='Counts_all' param='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' type='filter' values='relevant' />
        <zone mode='checkdropdown' name='Counts_all' param='[greenplum.41866.548072407400].[none:retailername:nk]' type='filter' values='relevant' />
        <zone mode='slider' name='' param='[Parameters].[Parameter 3]' type='paramctrl' />
        <zone name='Ratio' pane-specification-id='0' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='color' />
        <zone name='Ratio'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[greenplum.41866.548072407400].[none:subcategory:nk]</field>
            </color-one-way>
          </highlight>
        </zone>
        <zone name='CondensedRatio'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[greenplum.41864.699977557900].[none:subcategory:nk]</field>
            </color-one-way>
          </highlight>
        </zone>
      </zones>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='Counts_all' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nOzdd3hTZfvA8W9mm+7SBaWUsmSDDEFFVMTBcCAgIKCgggMRFEQUX3zFgft1
      AOIPZamoCALKRhQRRVARQfYoFCh076Zt1vn9URsolHHShKTt/bmuXrQneU7uljb3Oc+4H42i
      KApCCCFqHK23AxBCCOEdkgCEEKKGkgQghBA1lCQAIYSooSQBCCFEDSUJQAghaii9twPwpr17
      92I0Gr0dhhBCeEWNTgBGo5FGjRp5OwwhhPAK6QISQogaShKAEELUUJIAhBCihpIEIIQQNZQk
      ACGEqKEkAQghRA0lCUAIIWooSQBCCFFDSQIQQogaShKAEELUUJIAhBCihpIEIIQQNZQkACHc
      qLCwkEWLFnk7DCEuiUZRFMXbQXjL4cOHpRqocElBjpmdPx2o4BEFu82OTl9xod1r7mqLRqPx
      bHBCXKIaXQ5aCFdpbQUEZvzqQsu2bo9FCFdJAhDCBQGKhrZ26UEVVZv8BgshRA0lCUAIIWoo
      SQBCCFFDyRiAEC5It9lYnJ6put2jgMwBEr5CEoAQLrAqCqk2m7fD8DmKQ8Fud5xzfNeuXbz9
      9tuMeOghruva9ZzH9Qbd5QjPq6wOCwrlZ92fOnWK999/n5YtWzFw4ACMRmO5x3UaPTqN5342
      kgCEEG5TmFXAoZ/2VfjY03ePgSzY9e1f5Y5rdFra3t3hcoTnVT8kzSfPknHO8asfigbSWJU0
      /ZzHOte5g/ohrTwWkyQAIYTbBFnzuTLzT3WNdDqg+ieAHkeskG9R1yjAASGeiQckAQghxOWR
      Hg45KkeAivw8E8u/ZBaQqNIcDgdbt27ltddeIzc319vhCFGlyB2AqDKSi5LYW7Cz3DG7zcb6
      Az+QFZjF7D+m06Ztm3KPh+jD6BR+7qCj8B12h4PEgwdp0qSJt0OpcSQBiCojPDeNVod+P+d4
      2wbh0CAcKIb95R/XB8WCBxKAzhhI48593H7eqi7FamNlRpaqNhablQ/79uXrr7+mefPmHoqs
      PKvVisFguCyv5cskAYgqIyDHRMC+aHWNImvBle6Nw+FwsGLVGmpdcaN7T1wNlCgKx61WVW2s
      Viu7du3izjvvZP78+VxzzTVuqZhaUaHjw4cP8fbb73D48GEeG/UYd/e5u8K2nqjYOi8rm6z0
      c2cBXUiPomJauD2S0yQBiKrDoQW7yl9ZDxRsKygoYMmSJYx49ka3n7smO3ToELfeeiuLFy+m
      R48elT6fXbHx9b73zzl+/ZjGXE9jiknky73vnPN470YPEOoXUenXP1uB3UGe49w1Ehfy6ptv
      8tZbbxEbG+v2eEASgKhC8h12MkvUTaMzWm24+09n48aN7NtX8Vx3oZ7RaOSRRx5h9uzZFBYW
      cu+99zJt2jQGDRqE/jz7KlwKvUPD4E2B6hvW0YKbJ9/Y7fYK70guZteuXYwbN4558+bh7+/v
      3qCQBCCqkAMlFpZnZatqU8fPn0fcHMfs2bPdfMaaTafT8e6771KrVi3efPNNcnJyeOSRR0hL
      S2Ps2LHodOpXwp48eZI5s2bxnzoxHohYvf3795ORkeFS19LixYu5+uqrGTt2rNu7piQBCKHC
      kSNHWLduHXXiZcZKRVzdYNBkMvHSSy8RExPDxIkTMZvNTJw4kczMTKZMmXJJdwKKopCens6M
      GTP46KOPKMjJ4T8fvOdSPO5ks9mYOnUqjVpfS3SdeqramkJ+xm63M3HiRNq2bUu3bt3cGpsk
      ACFUmDdvHkVFRd4OwycpisKWLVtcbq/X6xk7dix16tThwQcfpLCwkKlTp5Kamsr7779PYGDF
      3TkOh4Pk5GTmz5/PtGnTSEtLA8Dfz4/vcvJUx9HNbifY5e+iPEVR2LRpE4sXL+bN3o9Qp8EV
      qtoPHPIgf/+xmZKSEoYNG8YPP/zg1umykgCEuER5eXl8/fXXAJXqm66usrKyWLhkOX3uf1JV
      O722/EB9//79MRqNPP7445w8eZK5c+dSWFjIBx98QFRUVLnnJicn88knnzBnzhyOHTsGgFar
      pWXLljz++OP8deqU6u/jGkVxWwIoLi7mhRdeoKSkxKX2ffr04fCuLcycOZPjx48zfvx4vvzy
      y/MmQ7Xkt1iIS/Tzzz9z5MgRADp0aO/laHzPd999x/4DhwmJjFfVTnfWRC2tVstdd91FbGws
      ffv2JTk5mYULF5KSksJXX31FTEwM6enp/N///R//93//x4kTJ5xtmzVrxpNPPknfvn0JDQ1l
      6tSp7vjWXLZo0SJ++eUXl9vrdDqmTp3K33//za+//srKlSt58803eeGFF1waGzmblILwRdYi
      sBSW+3CU5PPj2uUsWfgZeZmnznkcu7q51zXF4cOH2bFjR6XPY7PZmD17NiUlJQQGBvLoo4+5
      Ibrqw2w28/775065dJVGo6FTp0788MMPNG3aFEVR+Omnn+jVqxf/+c9/aN26NZMnT+bEiRNo
      NBoaN27Mu+++y++//87DDz9MVFSUywOm77zzDlaVaxkqkpqayn//+18AoqOjCQ4Ocuk8ISEh
      fPHFF0RFReFwOHjllVdYsWJFpeMDuQPwTVvnQ075W1ctcBNAIPDboXPbtL4D6ne8DMFVLTk5
      OUydOpXPPvvsnFrrahw8eNB5JdeuXTuubN2KP/5Oc1eYVd66devYsWMHzdt2dsv58qy5lDiK
      qJUQyhcrPmP06NEkJyeTYUnls2/n4RelJz6qLjqdjjvvuotHH3mEuOh6BOnLd96YQqLO8wrn
      N3PmyyQkJPDoo4+6HL/D4eCNN97g6NGjaDQannjiCerVq0d+kd2l88XHxzNr1izuvfdeiouL
      GTlyJM2bN+eKK9SNKZxNEoAvSo2EDHWzKfKibITU91A8Vdy3337Lzz//zM033+xSe0VRWLx4
      MRkZpas4R4wYQZDdTpd8dVNSS9V1KQZfVlJSwv/+9z+3njPp2GZOZex1fv3ilIEXfP6x42vB
      2p5m9W90HtNo9VxxbX/Vr20MeJ/nn3+ezp07065dO9XtAbZv387cuXMBaNq0KSNHjuSfFJdO
      5XT77bczYcIEXnvtNdLT0xk2bBgrV66kVq1aLp9TEkA18corr5AcEsrTTz/NlVde6ZGl7FVV
      SUkJU6dOpXv37i79XKxWK8uWLQNKb+XvvvtucG22Y7W0du1atm7dCuC2GSqtkwy0PmhS2UgP
      broIysrKYsSIEaxZs+acgeeLKSkpca5n0Gq1TJ48mZiYGP5JUVcG4mx6vZ7nnnuOXbt2sXTp
      UrZu3cqkSZOYNm2ay3WNJAH4oM2FheTl5atqsys9ndUrVvLFF1/QrFkznn76aXr06EGdOnXQ
      aqvHUE9AWAyxza5V1cZqPAjAhg0bWLVqFb1791b9ut9//z1//VW6i9WgQYMICgqCfNdmdVQ3
      xcXFvPfee1gsFkJDQ3nyySfJ8XZQlXTVVVdx4uhB/vrrLyZNmsT06dPx87v0pcErV650zhbr
      2rUr9957r9tiM5lMvPvuu+zatYuDBw8ye/Zsrr76aoYNG+bSxY0kAB/0T1ExpwrNqtoYa9fB
      39+f4uJi9u3bx4gRIwgPD2fw4MEMHDiQDh06EBAQ4KGILw//oFpEJbRV1camDSQoKIiCggIm
      T55Mt27dVP8cFixYAEBAQADDhw9Hq9WirqJL9fXzzz+zadMmAG6++WZat27Npj2udI35jtdf
      f50De3awe/du5s6dy5VXXsmoUaMu6Q22sLDQOfAbHBzM1KlT3X43Xr9+fT755BN69+5NQUEB
      Tz31FK1ataJjR/VjgNXj0lAwYcIEVqxYwciRI4mJKV3+np2dzYwZM+jevTs9e/Zk5syZzkUy
      NUWTJo0ZOLC0/3jnzp3Mnz9fVfvDhw+zdu1aoHTwt2nTpm6PsaqyWCx88MEH2Gw29Ho948eP
      93ZIblG7dh1mz55NWFiYcxXupc4kmzFjBrt27QLgvvvuo1OnTh6JsWvXrkyZMgWdTkdOTg4j
      RowgPT1d9XkkAfgYV5fS+/n50b17dz766CO2bdvGe++9R7sr22E0+qHRaNmyZStPPTWOTld1
      5o3X38Bud1T44errXw6uLKbR6/WMGTPG+cc8ffp052Dupfjmm2/IyspCq9Xy8MMPV/m7KHfa
      unUrq1evBuDGG2+kc+fOaACtoqj8OPfcK3PzeTM1TdXHj/mFbvveOnXqxKuvvopGo6GwsJD7
      77//ohdPhw4d4p13SquLxsbGMn78+HILBrWK+p/N+e4dNBoNjz32GP37lw5y79ixg3HjxpGf
      n49DRcVR6QLyIWVL6Y8dO+byoI5Wq6Vu3bqMHPYQ1zc4/9XHzpVbKzx+5R1Xu/S6nuZwONiw
      YQO1m3ZR3bZNmzaMHDmSt956iz179vDxxx/z7LPPXvTW/MyVv3Xq1KF79+4uxe4tWVlZJCUl
      0aRJk9JxCzdyOBz873//w+FwoNPpePrpp9FqtYTbrNyWo/JKVKsByhdtK1EUzA51FyMWN168
      aDQaRowYwfbt25k9ezb//PMPTz/9NJ988kmF04ktFgtvvvkmaWlp6HQ6xowZQ8OGDcs9p0te
      FkqhuosYg8UPOD0Ybrc7KDGXrVHQ8sbUt0g7lcHhw4n8uvE3BvS7l5YtW9K+XTvad2hPfHx9
      NBowBVU8huFyAnA4HOTn56PT6QgMDJRZJ26QmprKo48+SufOnStd/zuAPNqxzoWWvpkAUlNT
      +X3r79zpQgIAeO6555gzZw6ZmZnMnDmTYcOGXfRnvGnTJv7++28A+vbtS926vjmFM9+WS461
      /C5cDoeDGZ98yIYNP9KpUyfGjx9f7qLCT+tPtF8dl19zx44drFy5EoAuXbpw3XXXuXwuX2U0
      Gnn11VfZunUr//zzD19++SUdO3Zk9OjR50ys2LRpk3OsqG3btpVaQ3Ahefn5/L7t73LHJr4w
      ucLnJqWcIinlFDablfmzZ9G2bVs6duxIXFwcjRs3xs/PT30CSElJYe7cuaxatQq73Y7dbick
      JIR+/foxePBgQkJCXPvOajiLxcIzzzzDzp076dy58otpCkt07Dus/qqvPZz3ttObNm3axKkU
      9XVdyoSHh/Pss88yYcIEjh8/zocffsgrr7xy3ufb7Xa++eYb7HY7er2eoUOHuvzanpabepjE
      IxvPOd772jh6X3s/AMd3riz3WGhIXaLbDHDp9Ww2GzNmzHBuqzhmzBi31aZxJy0KcSXqC/cZ
      lNNdKNHR0cyfP5+uXbs6B3i7dOlChw4dnM8pLi7mtddew2wunbjxn//8h9DQ0Mp/AxWwaQvI
      9d+mqk1JiZVFixaxaNEitFotISEh1KlTh0aNGqlLAKtXr+arr76iV69eLFmyxPmfnpGRwfff
      f8+oUaMYM2aMxwY+qitFUZg5cyaff/65286Za7ezPFfdVFIoTQC+RlEUfvvtN1V9mxV56KGH
      mD9/Prt27eLdd99lxIgRJCQkVPjcI0eOOLt/Onbs6NIMi8slLlNP3G6Vm4XUNkIb115v//79
      LF26FID27dvTq1cv1050AaExDandWN2uLMFn1SDSAK3N6v8GjEr537N27drxxhtvMGbMGHJy
      chgyZAibN292LsD69ttv+fHHHwG46667uOuuu1S/5qUKKdRwjcr/62KrjpCQEEpKSigpKSEn
      J4ecnBz27t2rLgG0bNmSOXPmnFOEKD4+noceeoihQ4eSlaVuQ2hRusPU5MmTURSF2rVrV2pl
      X3WUk5PDunXrqNukcukpPDycJ554gsceewyz2cwLL7zAnDlzKqzsuWrVKgoLSwcVR40aVW3W
      UlSWw+Hg448/JisrC51Ox1NPPYXJpHLB1iUIjWlAjE5dF1VwpOcG6EeOHMm2bduYO3cu+/fv
      56mnnmLWrFkUFhYyadIkFEUhLCyMl156yaO/K35APUXdPbriZ+LAgQMkJSXx999/s337dnKD
      0/GL0atLAGlpaaxatarCx6699lratGlDnTqu9yvWRMePH2fs2LHk5+djNBqZMmUKiqJwyoUy
      tu5w8uRJn+vrPnToEAcOHKBdQks6qSy/YMQfOL2/68CBA5k1axbbtm3j22+/5c8//+Tqq8uP
      e1itVj788EOgtAvg1ltvrfT34Gv279/P0bVrueWWW1S9YR06dIgvvvgCKL0gvPPOOz0Vok8x
      Go288sor7Nixg7/++osvvviCzp07c+rUKRITE52Dxq1atfJ2qOfQADExMcTExDh7Z7IPLKYo
      bYe6BGC328+7GYbNZqt0oDVNcXExo0aNYufOnQAMGzaM4cOHO2uIeMNdd93Ft99+6zNJQFEU
      lixZgs1mw8/hIMKmrkqjxl7+bjU0NJTnn3+eAQMGkJeXx7vvvsvnn39eboD0zz//ZP/+/QD0
      69eP6Ojoyn8jPiYtLY2+ffsyYcIEXnzxxUtqoygKc+fOdc43nzBhgkeu/n1VbGwsH374ITfd
      dBNms5nnnnsOu720uFujRo0YO3asx+8Uk602FqWpm2Wl1xsYfdax8FMhhB+KVpcAoqOjadOm
      4o7DyMhIVUHVdA6Hg6lTpzrLunbu3JkPPvigUhUr3WHbtm307t2bZcuWnbd//HKy2WyVqqde
      kT59+tC9e3fWrl3LkiVL2LBhg/Mq3+FwOMsaG41GhgwZ4vMz3LaYzaw9laqqTVJmFmazmSlT
      prBlS+mGIw0aNLhgm7S0NKZPnw6UvuGVzUGv7uw2OzZr6bjAlW3a886b/+OFf1f7YoBAUzDj
      n5pAVEQMJUWlFyharQaDn/tn2dsUhRy7urEwvaaCCqR2HdhUdgHt3bv3vHWo+/XrR3y8uo0g
      arLvvvuOt956Cyi9PZszZw7+/ioH8jxkx44d9O3bl6VLl1K/vndLjKakpPDnn38CYDSqGxQ8
      H41Gw/PPP8+PP/6I1Wrlv//9L926dcNgMHD8+HHWr18PwDXXXEP79r44LF6eoiiqa9NFRkUR
      Hx/PsWPHWLt2LbfeeivvvfcePXv2PO9V7IwZMygoKECr1fLUU0/5zO+rp6Um5XB01+kE2yau
      K8tm/3jO87atO+j8PLhWAK27JlyO8FySabNRaLGoSwC9evWiV69eKIpCUlISBQUFKIpCSUmJ
      DFyqsGfPHp588kmKi4sJDAxkxowZNG/e3Pl4cGQ9ilA3rc4vwD3Tznr06MGaNWvYvn07d999
      N8uXL/dqd9CqVasoLi4GoFOnq9x23muvvZa77rqLxYsXs2XLFpYuXcqAAQNYvnw5WVlZaDQa
      +vXrV227OJo1a8bq1asZMWIEv/32G4cOHWLAgAE8//zzFQ7snjp1io8//hgovfq/++67vRF2
      jac3mgir01hdmwp2DttYUMjOzGzXFoJ98cUXvPfee+Tl5REREcGxY8eYN2/eOSvf1FFKr2QU
      0Gi0VHTXrSgOFEWDRqtxzlUvbaOg0WhO36orCo6zj/mIvLw8xo0bR1JSEhqNhvHjx9OnT59y
      cda5ojOmuurGVIIi3LOL6YIFC7jvvvtYtWoV27dv59Zbb2XFihUX7R7wBEVRnGWYIyMjuf76
      66HAPefW6XQ888wzrF27lvz8fF555RW6du3K3LlzURSFunXrVvsujhYtWrB27VomT57MtGnT
      MJvNTJ48mb/++osPP/zQuauWoih8/vnnpKSUFrQfOnRozZrsYctHMSepaxMYDiS4PRS/wDDq
      t71FVZuzt9w8k0sjFuvXr2fJkiX06dOHTz75hDfeeKNSW6gpioMdm9fy2Mjh3D9sODM/W06J
      7cx+LoWD237g4ZEjGD7yEZb/shuHAraSAj6aOpnh993Hc1PeItdsQXHY+GHJZ4wYdj+PPDqG
      3UfV9Y16ks1m47///a+zuNgtt9zCxIkT3bK3p7uEh4ezYMEC7rjjDjQaDXv27KFnz54cPHjw
      4o3dLCUlhd9++w0oLdHr7juR9u3bM3jwYAB2797NM8884yzkdeutt9aIN7ng4GDeeecdFixY
      QHR0NA6Hg2+++YZrr72WzZs3oygKqampzJw5E4C6deu6XHq4qgq15NIw/4iqj1izd2bxqeXS
      HYDBYKCgoICEhAT++ecfmjdvzooVK+jZs6dLQRRmHuWxkaO564mXuKq+P+MfeYKY+g3od0Pp
      lKrinBOMenwMXYc9T1P/FCaOHkOr77/j0DfvMX3NP0x7cTSzX5vA66FNeLx7BGOee5vn33qT
      lF++YPQTL7J8yQyCDN6fx/35558zbdo0ABISEvjkk098srhYWFgY8+fP5/7772fFihXs37+f
      O+64g9WrV1/WO4FVq1aRl5eHRqOhd+/e6PUG3DnXTKfTMX78eJYtW0ZqaqpzIZ5Op2PEiBEX
      bJubl8kP6+epfs1+Pd52JVSP0ul0DBo0iGbNmvHEE0/wyy+/cPjwYXr06MHUqVOx2+0cPXoU
      KJ2pdjnGhRoUm4kuyFPVJrhEA7jnTvhMgYqGQJVz71H7fC9xKQEMHTqUSZMm8dprr/HAAw9Q
      UlLirIHtCo3WyH3DRzFk+ECCDQ5at32LEydPAaUJIGnfDjI1dXn8/nsINxTz3YKv2PLPHn5b
      v5z7H3yHm7pfR6x9LLe/tZyrg2Ko27Ef99xxGyXXNGFh70HsO5lLx/rhLsfnDjt27OCZZ57B
      brcTHBzMzJkziYuL82pMFxIeHs6nn37K4MGDWbNmDfv376d3796sXr36sg0Mb926FUVRCA4O
      5tpr1W0Ec6maNGnCo48+yksvveSshNqyZcuLluOwWItJOrHfIzF5y5VXXsnSpUuddZMKCgoY
      P348/v7+KIpCUFAQo0efPaHQM4LtNgKtFlVtdHaZin6p6lzRmeLgZuoSgMViwWAw0LVrV666
      6ir8/f1ZuHAhBQUFNG3aFIfDgd1uV13JMrBWHI9NGIeiOPjl69n8tDOT0R+c3oszOzeToIim
      BPrr0WqMJAQGYS42k5edTLM2jQCIjkugOO97stKOckW7O9FrNSimUIIDg7EW23A4HBw4cKDc
      65bV7vC0lJQUZ71ug8HAxIkTufXWWz16G63RaNDqKzeltKw76P7772flypXs3buXnj17smLF
      ikqO91xcRkYGGzZsAEo3wGjatClkFLvl3BaHBeWMLV1GjXmMuZ/Ncc5vf2DkcGxYsTlOd2vq
      NQZ0Gt/pqjtTZHwrWnVXdzERGXru74bNaicsNJzpH8ygQ7uOTH5hMsXFxSgOCAoM5uGRDxMV
      GY3NenpaoVanRautGle7rrKhYFNZhkSjOHDPnDXPMPgHYQpWOQ104cKFZGZm0qtXL+rXr49G
      o6FevXqYzWZ2797NsmXL6NSpEz169FAdkN1awuJPpzPpv+/zv8+W0qnB6XUFeq0OjeJwTnUr
      +1ejMWL7t26HggI60GqN2M4sC6tVnCMdZ3e3WCzqrjAuymqG4txyhxwOB/OmvYklK4k2DaPo
      0uU6nn5kCNrCf8cmdAYIcP8aCv/gSFrf/FClz1OrVi0+++wzhg0bxvLly9m7dy+9e/dm+fLl
      NG6sbjaCGjt27HB2O9xxxx0EBARgwz0J4OfjC8guLr9D99urHjvjq2K+O/Ruucc7xPSgYZhr
      G4R7mkarRWdQl+y1unMv0g5t2ENxXulCz6uj2/H9R+dO+d71bflCZPFXNaRW/dO/v1abhYws
      df3fGp2WuvjeCtoyfxSaWZuqbvFVvJ+JBz0UjzupSgD33nsv69at45VXXiEzMxM/Pz+sVisO
      h4O6desyfPjwc5bVXwqH3cqn017i5dm/MHPRCm67pvxis6jIGArT95BntmDQF7A3K49OYTFE
      1W3Mnj93069jXfbv30Vs7VrE1o9n/zc7sNjvpTA3hdyCQsKDTGi12nPWKVRm4LpCyXthR/mq
      i1rg2U4RPNvpjFvnXz89/XlYHbhhpHvjcLPw8HDmz5/P0KFDWbVqFfv27aN37958//33Hln7
      4XA4WLFihXOnKXcXG7v5qA1yVP7f+zkgrPKvbbPZXN7rwdOaZe+CHJU7+paEAacTQHrmSRZ+
      94GqU+iNRsYOulnd61ZBySmJlOSoG9eIbRxMKJ7rvlaVAMr+GLt3705aWhqZmZno9XoiIiKI
      ioqqsKjWpTi551eem/QWTXv046flX/LTd19yS//7sR76iW1ZYUy4/2YSgtN58tlXaW5IZn9h
      HTq3akBszz70fe55QtnPwrffZuALC7jyqkAynh3Eq+/UIfmnZcQ0vZUG0ZepVK3ZBClR6trY
      zn1XqW0pIaRY3cYRQXYPDSZnHYbCNMKBT6eO4n8RReTmlt7lrJ39IiNHVJC8AqOhViOXX9Js
      NrNxY2l545iYGJcuKi4oIxwyVPYXN3HPoqe0tDSfKbMhLo0pJJKIeHV3KKEx597Vb9zyLVnJ
      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
      sXPnTiZOnCirD5scQHJyMgsXLqRLly5OHaaX+QcwcfwTvDj1Xr5942UenvJPXuyro2FEAJIC
      FAoJpVKFwmwZBsfFxVVrr9FobI6fdXU0Sn/+1tA1ajS0aNGCRx99lC+++II9e/awceNG7r//
      fut+s9nM5s2brbIREyZMcJaptUZkZCRqtRqDweDwUNBVq1YBFh2Z8ePHO2W9TuAYunbtai0a
      tX37dtkOwKand1pamsPfWm6Fwfc9ytuvP02L5i149p/PkXP0LHrvRuSk5WMyg8mkx2jSo1RJ
      KJVKBg8eXO1/babg13eef/55axHr9957D51OZ92n1WpZvdoSshoYGFgvigu1aNHCGrZ35swZ
      h2kC6XQ6a/hnhw4drDIUAvegffv2tGjRAoDt27dTXFwsq71NI4Do6GimTJlCy5YtrSXtnnzy
      yVofXs6b/Xe07acw76Wx7NiwjsC2UXRs141Pv15GRsHD5OzZTF65D83C6pZS6c/FxeTlyYvg
      6VNVRbSD7LEHrVu3ZuLEiXz++eccPnyY9evXW0cB586ds0b/xMTEoNFonGlqreDn50dYWBiF
      hYVkZmZSWVnpkPKQR44csaqODhgwQKj2uhkajYaYmBhOnDhBZmYmycnJsirn2eQAJkyYYFWo
      vIwz8gCeePYFHpg0gw7/fQOT0p8vv19J99ZBDO70IwN6daGiBP792RJCfeqWlHDfqJ4Ygspl
      tfELlLf4U9solUqmTJnCypUrKSwsZN68ecTExODt7c2PP/5orXMwduzYejNF0a5dO86cOcOl
      S5coKSlxiANYv349BoMBSZLo37+/3fsX1C5ms/mabb1790apVFJeXk7slli6det2zWf+6jtl
      kwPw9/fn22+/ZdeuXTzzzDMcP36cadOm2dJVjWhz+xgSTo2grLwSb40vHirLjNbc737kzbIK
      lJ6eeNVFHXm9DnQySyoajTf/jJPp3LmzNS/gwIED/Pzzz4waNYrFixcDlimKu+66y7lG1iLt
      2rXjp59+Iisri6KiIrtPSWq1Wn755RfAMuUktP/rPsV5ZSRsqx7d50sEm5dfkYnf+sPBavsl
      lcTd911/VGCTA/jyyy8xmUxERkbi6+vLpUuX+Omnn2QvQNgDSemBv/+fH/ISPjLUJ12NjXHf
      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
    </thumbnail>
    <thumbnail height='384' name='CondensedRatio' width='384'>
      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
      AkAIIcQnktyvKYQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQ
      FiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQ
      FiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFjVmAIR2beO5l1b+m7/SYP0bT7KuNfgR
      TksIIUS2jRkAfa0beejJZf/mr1SsfmEJq7b0f4TTEkIIkW1jBoCGYt0z9/HFL36OL5/0YzZ3
      D/H8A3/h2COO5qhjvsKSZzcRH+7l0rNP5agjjuFrJ5/D5p2DkApzz/W/5ZiDD+Lbp11DTCle
      WnIznzvyGI465gTu/+c6BrubOOcH3+TThxzJD874A52haK7aLIQQgg8NAPB567ni+pv42jQH
      l115Db869+9cfutdXLv4W1x15eU8cvetrOqr5NZ77uQzkxNceedjqHiMmumLuO2eO0huvJtN
      u1o4++w7+d2Nt3L9RSfz1+uv5C/XXcGuCYdz9wN3MCW5mjsefzZHTRZCCAEfEgAGMG7/eTSO
      r+LAY46ko301LdUNzKgtZ+r8hdh6+1jT3kLBnDmMryhn//nzaN/WRtpVyIJFR1BRWUXlhDJG
      BrrZVl7L9LoKJs/dH/fgIC1tQ3zhUwdSUVHN/kccxsBQJEdNFkIIAf/CDGD726tZ17yTpx99
      iJpJs5nU2sQbTW2sfO1lRirKWVjfSPerS9nW2s7zry+nasoEdLsNp9sFmoama9jzypnesZ03
      Nu1k9dLXGCwsZNKEQp578jl2tu7ghReeIT+/MEdNFkIIAWAf60WPv4RKZ5irfvMbHBU1/Or8
      X9I1t5qLzz0Hm9vBeb8+i6Nml7K59XJ++5tzoLieC87+LK2vdJDId6NpOrUNUykIVHHZDT/g
      kot+i83l4Be/PJ2jp/q59vJL+c1vllFWfxi//NynctRkIYQQAJpSSo15hFKkUil0mw1d10Ep
      0qkU6Do2m+2dYwySyTQ2ux1d1z7wV6WTSZSmY7fb3vlrBqlUGrvDjqZ98N8TQgiReR8eAEII
      IT6R5F8CCyGERUkACCGERUkACCGERUkACCGERUkACCGERUkACCGERUkACCGERUkACCGERUkA
      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
      h9JSmD3b/FJmew/C4zGvOofeuSINBMy2V1Rmv7bTaQ5IwaC5Nu31wvTp5oZotvcAXC4w0tDd
      vXczurgYFh5o9kk22e3mZ6y9fe8Vv9sNhxxq9n82+13XzfYNDZozEbsdJkww916c7xOIGaQp
      tbun359SCsNIo+k29PfrBKVIGwa6rqON0UnKMDAU6Lo25nFCjKLU3qUPjye3dwHFYubyQyoF
      hUXmQJCL8FHKXBbo7zNDKD/frJ+LTdjddyD195tLIj4fFJeYg1Iu+j6Vgl3t5oasxwP1DXvv
      Qso2wzD3m1pazHoNDVBUnLva4WGz320284LDnf3P+4cGgBBCiE8m+YdgQghhURIAQghhURIA
      QghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIA
      QghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIA
      QghhURIAQghhUWMGgErHWfbUI9x19xKixnteNOL0B4dQKsnyZ//OXQ8+RiiayuKpCiGEyKQx
      A2C4awtXXPpH4jYH6j2vNT17G1fdvYzUUCsXXnsrkZQNXdeyeKpCCCEyyf6Br6g4D997N8u3
      6ByeTPLQNefx9KpNxJNFnHP5n/jH3Q/x8IYC8kN1bNzQxjFJJ00vP8AtDz5MT3eaI08+nR9+
      fi5P3H0Ndz6xDF/RdC659Dza3niIa//8MFRW8/NfnMX+k8flsLlCCCF2G2MG4GDBgQcx/YD9
      WNDg5oUWjV+ds5j9/Z3c+9w2DjtkLnOOPJYvH/9Zps/fjyMW1vL4yys56ms/50ff/BT33fIg
      HduX8Zu7lnPeRVeyf1GYxx95jp9dcicnnHYGJ8zzc8WlVzGYeO/akhBCiFz44BmAplNaVkxB
      SYD6iVPwJR7l6iuvoXt9M9MOVlSUF1IYrmR8dRVefx6l5eU0VFfw4O03YY/1EVZ1DHW2MX3u
      ImZPqmfauRfTvu4Zft/dwaP33oYtGUZzFBJPGuCUvWghhMi1Dx15NaB51TOsHvRw7vnn8/kF
      k0lGYqBgJNRNNGlu/MaDrdz7xHN866dn87OTTiAvHsOZX0zXli30Bgd45pbLefDFDqrG1XP6
      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
      qoi9kT4JfQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Ratio' width='384'>
      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
      BAsgiKLEEjXGbqxRE3uJELCLBTWa1TUeNTG6ahBLjCWiRmNDQak2lCKgSJPee5mBGWDae9/f
      H+y8n0N4j5ndkz3r3nNyTnxzL/d+XvmW276tra0wNFS9MpSmaUgkEujr66ss097eDl1dXWhq
      qu5SUtcuqbQjt16d+/W/gl1d/n9FRiKRgMfjQUtL9bWUujrkcjnkcjn09PTU0mFgYNBxnOZf
      ZNd/AjtFUZDJZGphb2trg76+/l+OXVNT8y8dU/4j2MkHSFVVVWrxV1RUkOrqarVkUlNT1eIX
      iUQkJydHLZmsrCzS1tamloy6dlVWVqp9v9TV0dbWRrKystSSyc7OJq2trWrJqGtXWloaoShK
      ZX6apklaWppaOoqKikhjY6NaMuri4PP5pKCgQC2Z169fE7lcrpaMunaVlJSQ+vr6v1SHQCAg
      +fn5asmkp6cTqVSqloy6dpWWlpK6urq/VEdLSwvJy8tTS+bt27dEIpGozP9f6wL6V4kQovLs
      R97b/KgiQ947n1ZDQ4NTRsGrzirkX5Un/2ya1p1N/66MOtTZfnXxqMr779j1n7jHqv59dXW8
      /+4SQrrdSf0791Rdu97Xpe69/VdtVEWH4m//Lz33f3cc+iAngPfBEEJQWloKmayjivTSpUtY
      uXIlHBwcmO2Zpqam0geSn5+P2tpaWFtbY//+/dDS0kJAQACGDRvG8PB4yrlHaWlpyMvLg5aW
      FsLDw9GzZ0/s3bsXRkZGjE3vy0ilUnz11Vc4fPgwXFxcunwAPB5P6Tqfz8eRI0fQv39/JCcn
      QyKRYPfu3ejTpw+rXYmJibhw4QJyc3Px0UcfYeLEiViwYAHzdzU1NZV0yOVynDlzBklJSdDQ
      0ICRkRHWrFkDNzc3Vh0ymQw0rewH1dLSUuJ7//8JITh16hRev36NpUuXYsyYMTh27Bg2bNjA
      uAs66xAKhTh58iT69u2LJ0+eQCaTYd++fbCzs+tSB03TzDNXkIaGhpKrq7OOoqIiHD58GFZW
      Vti1axcqKiqQmZmJOXPmsMrExsbi+fPncHR0RFRUFMaNGwdfX1/W+ysUClFTUwMAqK6uRkZG
      BubNmwdra2tWHRcuXMDy5ctx8uRJpKamok+fPvjuu++Y97fzuyWXy3Hy5EnMmDEDwcHBEAgE
      +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
      H0gkEiQlJeHw4cOs/NbW1khPT8eJEydgYmKC2tpaTvcPAHh6euKHH35gbElPT1fKgukKO03T
      +PHHH2FlZYXm5mYUFBSw7voAwMvLC/v370dWVhZ0dHRQUFDA+f5qaGhg165d0NTUxLZt21SK
      L/Xo0QOXL1/Gq1evOAfX92nu3LmoqqrCnDlz0Lt37275tbS0cO7cOQQHB2PHjh0qpXO6ubnh
      xIkTMDQ0ZI2rdKbt27dDLpdj27ZtKrmzTE1N8dtvv+HFixec39/7NHPmTFRWVmL69OlwcHD4
      0+//UzGA5uZm3Lp1CytWrFA5pzY1NRVisRgjR45UqSpVKpXi5s2bmD59OkxNTVV6OUpLS5GW
      loZZs2apbNfDhw/x0Ucf4aOPPlLJLqFQiBs3bmDlypUq6RAIBNDQ0IBAIICNjU23Hx9FUait
      rUWPHj1QU1ODPn36dKujra0Nra2toGkaenp6MDEx6da3W1dXB1NTU5SXl8PZ2ZkTe3t7OzIz
      MyEUCmFtbY3+/ft369uuqqpCfn4+NDU14eLiAisrK04dFEUhKysLDQ0NMDU1haurK/T09Dhx
      CAQCZGVlQSaTwcHBAX369OEM1hFCUFhYyARNBw4c2O27JRaLkZGRAaFQCCsrKwwYMKBb7NXV
      1cjPzwfQMalbW1t3iz07Oxv19fUwMTGBq6trt1Wmzc3NyMrKgkQigYODAxwdHVUKVCqIpmm1
      a1O4XDNdEfln3r06Mura9Z/QoZD5t7Bz5hB9oHT+/HnOVL3OJBAIyKlTp9TSERkZqXbV6OHD
      hznTQDtTQUEBuXHjhlo6Lly4oFbVc0tLC/n555/V0hETE0OSk5PVkvnxxx/VqkwtLi4m165d
      U5lfLpeTH374QS2bUlNTOdPuuqLg4GDS3NysMn9tbS05f/68Wjpu3bqlVgUoTdPk8OHDaul4
      8+ZNt+mpnSkkJITw+XyV+evr68m5c+fU0nH37l2SnZ2tlsyhQ4fU4s/IyCD3799XS+bMmTNq
      VXw3NjaSM2fOqKXj/v37JCMjQy0ZdbHn5OSQu3fvMv/+n9gBEEJAURQIIcjKyoKTk1O3q02F
      /76hoQENDQ3o168f5wpKoUNTUxPv3r1Djx49ul09EkJA0zTa29uZ7bCuri6nXQodimCrg4ND
      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
    </thumbnail>
    <thumbnail height='384' name='Trends Analysis' width='384'>
      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
      119/fdMcu56TtpeXF3V1dbRr145x48bh5+enq6aSoigEBQVRUlLC2LFj6du3b9Ou4Ja6eFz6
      9evHzTffjNFo1LVc1WQyYTKZUBSFCRMmEB4eTkhIyBUfF9kHINqEhIQE7HY7J0+ebHoWoIeq
      qqxbt45OnTqxfPlyjh07RlFRka6YZ8+epaSkhPT0dBISEti6dauueJqm8fXXX9O9e3eWLVtG
      UlISWVlZumJu3ryZ0NBQtm7dSnZ2NrGxsbriVVVVNW1a2rRpE3v27KGurq7F8TRN48svv6Rf
      v3588skn5Ofn8+233+oa46lTp6isrOTcuXMcPXpU93FRVZV//OMfdO7cmRUrVnDq1Cnd5So2
      bdpEeHg4mzZtIjc3V/dxKSkpITExkcbGRrZt20Z8fDz19fVXHEcSgGgT/P39yc3N5dFHH+XE
      iRNkZGToiqcoCg6Hg169ejF+/Hg+//xz3WO8OGUxY8YMcnJydO8OvdhIpHPnzkyZMoVPP/1U
      9xj9/PwoLy9n4cKFrF27VncNG5PJRHV1NePGjSM0NJSdO3fqHqPFYsFoNPLEE0/w7rvvtmgH
      67/y9vampKSEWbNmkZaW1ip1djRNo1u3bkycOJEvvvhCVzxwNnCpqKhg4cKFrFq1iurqal3x
      3N3dqaysZOLEifj5+bF79+4WxZFloKJN0DSNkpISgoOD0TSN9PR0Xbsvte+qOYJz6iYvL4+A
      gADdfYZLS0ubpitaY4z19fXY7Xa8vb0pLCzEy8sLHx+fFsdUVZXS0lJCQkKw2Wzk5+fr7glc
      UVGBp6cnJpOJzMxMOnbsqKsfwMWmOgEBAVRVVVFXV6drmuqHxyUjI0P3ru/a2lpUVcXLy4uC
      ggLdFUtVVaWsrIzg4GBsNhsFBQWX7CjXnNY6LpIAhBDCRckUkBBCuChJAEII4aIkAQghhIuS
      BCCEEC5KEoAQQrgoSQBCCOGiJAEIIYSLkgQghBAuqtltY9oP2qv9656x1mppJoQQ4r+j2TuA
      E7u3sXrj3n95ReNPf34W2TsshBC/fM3eAZTnZpGUbaRnZz86dLqGIH8fjiQkkJOVRmVtIz16
      dMdkUMjKuEBlrY2IyG54WtyRewMhhGj7Llk56MMPXqWhejJbtuxg/ZbtVGSfZeGfXsRWnka/
      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
    </thumbnail>
  </thumbnails>
</workbook>
