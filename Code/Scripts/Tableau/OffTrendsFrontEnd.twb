<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='mac' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8200.14.0720.2105                                -->
  <preferences>
  </preferences>
  <style-theme name='modern' />
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.3'>
      <aliases enabled='yes' />
      <column caption='1' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='1.0'>
        <calculation class='tableau' formula='1.0' />
      </column>
      <column alias='Declining subcategories' caption='IsIncreasing' datatype='integer' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='0'>
        <calculation class='tableau' formula='0' />
        <aliases>
          <alias key='0' value='Declining subcategories' />
          <alias key='1' value='Increasing subcategories' />
        </aliases>
        <members>
          <member alias='Increasing subcategories' value='1' />
          <member alias='Declining subcategories' value='0' />
        </members>
      </column>
      <column caption='Low statistics threshold' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='6.0'>
        <calculation class='tableau' formula='6.0' />
        <range granularity='1.0' max='20.0' min='0.0' />
      </column>
    </datasource>
    <datasource caption='trends 2 (no subcat filter)' inline='true' name='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)' version='8.3'>
      <connection class='greenplum' dbname='demo' expected-driver-version='PostgreSQL Unicode' odbc-native-protocol='yes' port='9999' server='localhost' username='gpadmin'>
        <relation name='trends_master_weekly' table='[ds].[trends_master_weekly]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>numitems</remote-name>
            <remote-type>131</remote-type>
            <local-name>[numitems]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>numitems</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>28</precision>
            <scale>6</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_NUMERIC&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>batch_week</remote-name>
            <remote-type>130</remote-type>
            <local-name>[batch_week]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>batch_week</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[category]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>category</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>subcategory</remote-name>
            <remote-type>130</remote-type>
            <local-name>[subcategory]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>subcategory</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>taxonomiccolour</remote-name>
            <remote-type>130</remote-type>
            <local-name>[taxonomiccolour]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>taxonomiccolour</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>markdown</remote-name>
            <remote-type>3</remote-type>
            <local-name>[markdown]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>markdown</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>newin_7</remote-name>
            <remote-type>3</remote-type>
            <local-name>[newin_7]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>newin_7</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>newin_30</remote-name>
            <remote-type>3</remote-type>
            <local-name>[newin_30]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>newin_30</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>retailername</remote-name>
            <remote-type>130</remote-type>
            <local-name>[retailername]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>retailername</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Counts_sel' datatype='real' name='[Calculation5]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if [Parameters].[Parameter 2] = 1 then WINDOW_SUM(SUM([newin_7]*[numitems]), 0, 0)&#10;elseif [Parameters].[Parameter 2] = 0 then WINDOW_SUM(SUM([markdown]*[numitems]), 0, 0)&#10;else 0&#10;end' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Counts_all' datatype='real' name='[Calculation_7970814111018179]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='WINDOW_SUM(SUM([numitems]), 0, 0)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column caption='Markdown' datatype='integer' name='[markdown]' role='measure' type='quantitative'>
      </column>
      <column caption='Newin 30' datatype='integer' name='[newin_30]' role='measure' type='quantitative'>
      </column>
      <column caption='Newin 7' datatype='integer' name='[newin_7]' role='measure' type='quantitative'>
      </column>
      <column caption='Numitems' datatype='real' name='[numitems]' role='measure' type='quantitative'>
      </column>
      <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
      </column>
      <column caption='Subcategory' datatype='string' name='[subcategory]' role='dimension' type='nominal'>
      </column>
      <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[subcategory]' derivation='None' name='[none:subcategory:nk]' pivot='key' type='nominal' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/elliedobson/Documents/Work/Customers/TRG/Code/ExtractedData/trends_master_weekly (ds.trends_master_weekly) (demo) copy 1.tde' schema='Extract' tablename='Extract' update-time='08/18/2014 02:11:29 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='6257681' timestamp-start='2014-08-18 14:11:29.797' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>batch_week</remote-name>
              <remote-type>129</remote-type>
              <local-name>[batch_week]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>batch_week</remote-alias>
              <ordinal>1</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>40</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;2013.44&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;2014.30&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>category</remote-alias>
              <ordinal>2</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>30</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;bags&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;watches&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>country</remote-alias>
              <ordinal>3</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;au&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;us&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>markdown</remote-name>
              <remote-type>16</remote-type>
              <local-name>[markdown]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>markdown</remote-alias>
              <ordinal>4</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>newin_30</remote-name>
              <remote-type>16</remote-type>
              <local-name>[newin_30]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>newin_30</remote-alias>
              <ordinal>5</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>newin_7</remote-name>
              <remote-type>16</remote-type>
              <local-name>[newin_7]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>newin_7</remote-alias>
              <ordinal>6</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>numitems</remote-name>
              <remote-type>4</remote-type>
              <local-name>[numitems]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>numitems</remote-alias>
              <ordinal>7</ordinal>
              <family>trends_master_weekly</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3850</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='real'>1.0</statistic>
                <statistic aggregation='Max' datatype='real'>79736.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>retailername</remote-name>
              <remote-type>129</remote-type>
              <local-name>[retailername]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>retailername</remote-alias>
              <ordinal>8</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>89</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;abercrombie &amp; fitch&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;zara&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>subcategory</remote-name>
              <remote-type>129</remote-type>
              <local-name>[subcategory]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>subcategory</remote-alias>
              <ordinal>9</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>323</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;3/4 lengths&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;wreath &amp; crown&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>taxonomiccolour</remote-name>
              <remote-type>129</remote-type>
              <local-name>[taxonomiccolour]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>taxonomiccolour</remote-alias>
              <ordinal>10</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>16</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;black&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;yellow&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.470244' measure-ordering='alphabetic' measure-percentage='0.376585' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:subcategory:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;fit &amp; flare dress&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;sundress&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;trilby&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;baker boy &amp; news boy&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;cable&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;maxi dress&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;beret&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;eyelash&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;lace dress&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;shirt dress&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;floppy hat&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;skater dress&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;unclassified&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;deerstalker &amp; trapper hat&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;prom dress&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;slim fit&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;cloche&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;pointelle&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;t-shirt dress&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;boater&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;carrot jeans&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;fine gauge&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;wrap&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;kimono&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;sweater &amp; jumper dress&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;turban&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;balaclava&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;bootcut&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;cardigans&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;coat dress&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;tank dress&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;veil &amp; fascinator&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;bodycon dress&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;straw hat&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;ear muffs&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;loose fit jeans&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;sheath dress&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;cossack hat&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;flare jeans&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;pinafore dress&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;poncho&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;slip dress&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;stetson &amp; western&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;western &amp; rider jacket&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;bowler hat&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;fluffy&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;midi dress&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;smock dress&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;drop waist dress&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;strapless dress&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;sun hat&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;fascinator&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;shapewear/shape suits&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;shift dress&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;skinny&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;fedoras&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;straight leg&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;baseball cap&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;chunky&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;party dress&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;tea dress&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;visor&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;bucket hat&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;crop jeans&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;jumpers &amp; sweaters&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;mini dress&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;beanie&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;boyfriend jeans&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;cropped&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;tunic dress&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:subcategory:nk]&#10;[:Measure Names]' type='palette'>
            <map-pri to='multiordinal_blue'>
              <bucket>&quot;boyfriend jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown'>
              <bucket>&quot;flare jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold'>
              <bucket>&quot;bootcut&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray'>
              <bucket>&quot;crop jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green'>
              <bucket>&quot;western &amp; rider jacket&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange'>
              <bucket>&quot;skinny&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink'>
              <bucket>&quot;unclassified&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple'>
              <bucket>&quot;loose fit jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red'>
              <bucket>&quot;carrot jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal'>
              <bucket>&quot;slim fit&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal'>
              <bucket>&quot;straight leg&quot;</bucket>
            </map-pri>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <datasource-dependencies datasource='Parameters'>
        <column alias='Declining subcategories' caption='IsIncreasing' datatype='integer' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
          <aliases>
            <alias key='0' value='Declining subcategories' />
            <alias key='1' value='Increasing subcategories' />
          </aliases>
          <members>
            <member alias='Increasing subcategories' value='1' />
            <member alias='Declining subcategories' value='0' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='trends 1' inline='true' name='greenplum.41866.548072407400' version='8.3'>
      <connection class='greenplum' dbname='demo' expected-driver-version='PostgreSQL Unicode' odbc-native-protocol='yes' port='9999' server='localhost' username='gpadmin'>
        <relation name='trends_master_weekly' table='[ds].[trends_master_weekly]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>numitems</remote-name>
            <remote-type>131</remote-type>
            <local-name>[numitems]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>numitems</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>28</precision>
            <scale>6</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_NUMERIC&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>batch_week</remote-name>
            <remote-type>130</remote-type>
            <local-name>[batch_week]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>batch_week</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[category]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>category</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>subcategory</remote-name>
            <remote-type>130</remote-type>
            <local-name>[subcategory]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>subcategory</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>taxonomiccolour</remote-name>
            <remote-type>130</remote-type>
            <local-name>[taxonomiccolour]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>taxonomiccolour</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>markdown</remote-name>
            <remote-type>3</remote-type>
            <local-name>[markdown]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>markdown</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>newin_7</remote-name>
            <remote-type>3</remote-type>
            <local-name>[newin_7]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>newin_7</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>newin_30</remote-name>
            <remote-type>3</remote-type>
            <local-name>[newin_30]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>newin_30</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>retailername</remote-name>
            <remote-type>130</remote-type>
            <local-name>[retailername]</local-name>
            <parent-name>[trends_master_weekly]</parent-name>
            <remote-alias>retailername</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Ratio' datatype='real' default-format='p0.00%' name='[Calculation1 1 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if([Calculation3 1 1]&gt;[Parameters].[Parameter 3]) then (([Calculation3 1 1]/[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation5])/([Calculation1]/[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation_7970814111018179]))&#10;else 0&#10;end' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Counts_all_subcat' datatype='real' default-format='p0.00%' name='[Calculation1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='WINDOW_SUM(SUM([numitems]), 0, 0)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Counts_sel_subcat' datatype='real' default-format='p0.00%' name='[Calculation3 1 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if [Parameters].[Parameter 2] = 1 then WINDOW_SUM(SUM([newin_7]*[numitems]), 0, 0)&#10;elseif [Parameters].[Parameter 2] = 0 then WINDOW_SUM(SUM([markdown]*[numitems]), 0, 0)&#10;else 0&#10;end' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='BinaryRatio' datatype='real' name='[Calculation_0970814164744604]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='if [Calculation1 1 1] &gt; 1 then [Calculation1 1 1] else 0 end' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column caption='Markdown' datatype='integer' name='[markdown]' role='measure' type='quantitative'>
      </column>
      <column caption='Newin 30' datatype='integer' name='[newin_30]' role='measure' type='quantitative'>
      </column>
      <column caption='Newin 7' datatype='integer' name='[newin_7]' role='measure' type='quantitative'>
      </column>
      <column caption='Numitems' datatype='real' name='[numitems]' role='measure' type='quantitative'>
      </column>
      <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
      </column>
      <column caption='Subcategory' datatype='string' name='[subcategory]' role='dimension' type='nominal'>
      </column>
      <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[subcategory]' derivation='None' name='[none:subcategory:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/elliedobson/Documents/Work/Customers/TRG/Code/ExtractedData/trends_master_weekly (ds.trends_master_weekly) (demo).tde' schema='Extract' tablename='Extract' update-time='08/18/2014 02:11:29 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='6257681' timestamp-start='2014-08-18 14:11:29.797' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>batch_week</remote-name>
              <remote-type>129</remote-type>
              <local-name>[batch_week]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>batch_week</remote-alias>
              <ordinal>1</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>40</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;2013.44&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;2014.30&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>category</remote-alias>
              <ordinal>2</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>30</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;bags&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;watches&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>country</remote-alias>
              <ordinal>3</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;au&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;us&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>markdown</remote-name>
              <remote-type>16</remote-type>
              <local-name>[markdown]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>markdown</remote-alias>
              <ordinal>4</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>newin_30</remote-name>
              <remote-type>16</remote-type>
              <local-name>[newin_30]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>newin_30</remote-alias>
              <ordinal>5</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>newin_7</remote-name>
              <remote-type>16</remote-type>
              <local-name>[newin_7]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>newin_7</remote-alias>
              <ordinal>6</ordinal>
              <family>trends_master_weekly</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>numitems</remote-name>
              <remote-type>4</remote-type>
              <local-name>[numitems]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>numitems</remote-alias>
              <ordinal>7</ordinal>
              <family>trends_master_weekly</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3850</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='real'>1.0</statistic>
                <statistic aggregation='Max' datatype='real'>79736.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>retailername</remote-name>
              <remote-type>129</remote-type>
              <local-name>[retailername]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>retailername</remote-alias>
              <ordinal>8</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>89</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;abercrombie &amp; fitch&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;zara&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>subcategory</remote-name>
              <remote-type>129</remote-type>
              <local-name>[subcategory]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>subcategory</remote-alias>
              <ordinal>9</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>323</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;3/4 lengths&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;wreath &amp; crown&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>taxonomiccolour</remote-name>
              <remote-type>129</remote-type>
              <local-name>[taxonomiccolour]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>taxonomiccolour</remote-alias>
              <ordinal>10</ordinal>
              <family>trends_master_weekly</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>16</approx-count>
              <scale>1</scale>
              <width>100</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;black&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;yellow&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>400</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.470244' measure-ordering='alphabetic' measure-percentage='0.376585' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:subcategory:nk]&#10;[:Measure Names]' type='palette'>
            <map-pri to='multiordinal_blue'>
              <bucket>&quot;boyfriend jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown'>
              <bucket>&quot;flare jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold'>
              <bucket>&quot;bootcut&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray'>
              <bucket>&quot;crop jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green'>
              <bucket>&quot;western &amp; rider jacket&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange'>
              <bucket>&quot;skinny&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink'>
              <bucket>&quot;unclassified&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple'>
              <bucket>&quot;loose fit jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red'>
              <bucket>&quot;carrot jeans&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal'>
              <bucket>&quot;slim fit&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal'>
              <bucket>&quot;straight leg&quot;</bucket>
            </map-pri>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[pcto:sum:newin_7:qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[win:sum:newin_7:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[greenplum.41866.548072407400].[usr:Calculation1:qk:1]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:subcategory:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;basketball boots &amp; hi-tops&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;brogues &amp; wing tips&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;clogs&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;cold weather boots&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;fit &amp; flare dress&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;gilets &amp; bodywarmers&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;hawaiian shirt&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;knitted gloves&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;mukluks &amp; moccasin boots&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;nightdress&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;sling back&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;sports&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;sundress&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;trilby&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;umbrella &amp; parasol&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;woven scarf&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;3/4 lengths&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;baker boy &amp; news boy&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;boyfriend coat&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;cable&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;cargo trousers&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;cosmetic bag&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;flat boots&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;henley shirt&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;loungewear &quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;maxi dress&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;mid-heeled boots&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;oxfords&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;shopper&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;sports sandal&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;wayfarer&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;wrap scarf&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;ankle boots&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;beret&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;bralets&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;chelsea boots&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;cowboy boots&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;duffle coat&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;eyelash&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;high-heeled shoes&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;lace dress&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;leather gloves&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;midi skirt&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;parka&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;riding boots&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;shirt dress&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;swing coat&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;tennis shoes&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;bandeau top&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;bodysuit&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;calf length boots&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;denim skirts&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;fine jewellery&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;floppy hat&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;hair clips&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;loungewear&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;muff&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;playsuit &amp; romper suit&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;sheepskin &amp; shearling boots&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;skater dress&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;suspenders &amp; braces&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;tulip skirts&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;unclassified&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;wide belt&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;belt bag, fanny pack &amp; bumbag&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;block-heeled boots&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;brothel creepers &amp; flatforms&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;dancing shoes&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;deerstalker &amp; trapper hat&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;fleece sweatshirt&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;jeans belt&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;loafers&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;mirrored eyewear&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;printed scarf&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;prom dress&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;satchel &amp; messenger&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;slim fit&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;sunglasses&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;trench coat&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;wedge shoes&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;aviators&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;block heel sandal&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;circle skirts&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;cloche&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;culottes&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;embellished belt&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;hosiery&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;leggings &amp; knit bottoms&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;necklaces&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;pegleg trousers&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;pointelle&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;safari jacket&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;t-shirt dress&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;tank top&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;track &amp; sweatpants&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;wedge boots&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;ankle strap&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;biker jacket&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;boater&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;carrot jeans&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;chemise&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;drawstring bag&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;dungaree &amp; overalls&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;fine gauge&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;hobo bag&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;leather jacket&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;military coat&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;pouch&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;riding jacket&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;swing top&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;thigh-high boots&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;wrap&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;baskets&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;bowling bag&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;cargo shorts&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;corsets &amp; bustier&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;flares&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;headbands&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;kimono&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;knitted scarf&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;maxiskirt&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;oversized eyewear&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;shoe boots &amp; booties&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;sports gloves&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;sweater &amp; jumper dress&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;turban&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;wax jacket&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;alice bands&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;balaclava&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;bootcut&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;brooches, badges &amp; pins&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;cardigans&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;clutch bag&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;coat dress&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;document holder &amp; portfolio case&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;driving gloves&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;hidden heel&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;lace gloves&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;mid-heeled sandals&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;padded &amp; down coat&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;shoulder &amp; cross body bag&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;sports watch&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;tank dress&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;veil &amp; fascinator&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;vests&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;wrap skirt&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;biker coat&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;bodycon dress&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;bomber &amp; blouson jacket&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;cape&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;digital&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;fingerless gloves&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;harem pants&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;kimono top&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;macintosh &amp; rain coat&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;purse &amp; wallet&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;shell top&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;snowboots&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;straw hat&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;waist cincher&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;work boots&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;biker boots&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;board shorts&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;bubble &amp; puff skirt&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;deck &amp; boat shoes&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;ear muffs&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;flip-flops &amp; thongs&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;gladiator sandals&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;jodhpurs&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;loose fit jeans&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;mittens&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;platform boots&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;sheath dress&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;skater skirts&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;slip-ons&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;visors&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;wellington boots&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;backpack&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;block heel shoe&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;city shorts&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;cossack hat&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;cut out boots&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;espadrilles&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;flare jeans&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;hot pants&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;lightweight scarf&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;miniskirts&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;pencil skirts&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;pinafore dress&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;poncho&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;sarongs&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;tankini&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;trainers &amp; sneakers&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;wedge sandals&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;bangles &amp; cuffs&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;bolero&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;camisoles&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;desert &amp; chukka boots&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;fine watch&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;hair ties&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;kimono coat&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;luggage &amp; suitcase&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;plimsolls&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;shell jacket&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;slip dress&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;snood&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;stetson &amp; western&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;tunic&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;western &amp; rider jacket&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;wide leg pants&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;anklets&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;bikinis/two-piece&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;bowler hat&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;chino&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;crop top&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;flat shoes&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;fluffy&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;holdall,weekend &amp; overnight bag&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;leather shorts&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;midi dress&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;military jacket&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;pea &amp; reefer jacket&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;rings&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;smock dress&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;strapless top&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;tiara&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;baseball varsity jacket&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;briefs &amp; panties&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;card holder&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;cocoon coat&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;drop waist dress&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;fur &amp; faux fur coat&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;harrington &amp; golf jacket&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;knee-high boots&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;mary janes&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;polo shirt&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;skorts&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;spectacles &amp; glasses&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;strapless dress&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;sun hat&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;walking &amp; hiking boots&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;worker &amp; utility jacket&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;ballerina pumps &amp; ballet flats&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;bras&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;classic&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;dressing gowns &amp; robes &quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;fascinator&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;formal&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;grab bag&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;long length gloves&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;moccasins&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;platform sandals&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;shapewear/shape suits&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;shawl&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;shift dress&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;skinny&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;slippers&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;trunks&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;bandeau&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;briefcases&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;clog boots&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;denim shorts&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;fedoras&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;frame bag&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;gypsy skirts&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;keyring&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;monk shoes&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;platform shoes&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;skinny belt&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;slouch boots&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;straight leg&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;tube skirt&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;western shirt&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;all-in-one&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;baseball cap&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;boyfriend shirt&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;cat-eye&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;chunky&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;court shoes &amp; pumps&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;flat sandals&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;high-heeled boots&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;lace-up boots&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;mid-heeled shoes&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;padded jacket&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;party dress&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;slip&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;swimsuits/one-piece&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;tea dress&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;tech covers&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;visor&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;wreath &amp; crown&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;anorak&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;blazer &amp; sportcoat&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;bucket hat&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;clutch bag - hard&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;crop jeans&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;dressing gowns &amp; robes&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;earrings&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;hoodies &amp; track tops&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;jumpers &amp; sweaters&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;leather skirts&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;military shirt&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;mini dress&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;peasant blouse&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;running shoes&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;t-shirts &amp; tee&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;tote&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;analog&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;beanie&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;boyfriend jeans&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;bracelets&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;charms&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;cover-ups&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;cropped&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;duffel bag&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;high-heeled sandals&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;laptop &amp; tablet bag&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;mules&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;para &amp; army boots&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;pyjamas&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;stole &amp; fur scarf&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;teddie&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;tunic dress&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Reino Unido&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <datasource-dependencies datasource='Parameters'>
        <column alias='Declining subcategories' caption='IsIncreasing' datatype='integer' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
          <aliases>
            <alias key='0' value='Declining subcategories' />
            <alias key='1' value='Increasing subcategories' />
          </aliases>
          <members>
            <member alias='Increasing subcategories' value='1' />
            <member alias='Declining subcategories' value='0' />
          </members>
        </column>
        <column caption='Low statistics threshold' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='6.0'>
          <calculation class='tableau' formula='6.0' />
          <range granularity='1.0' max='20.0' min='0.0' />
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
        <column caption='Counts_sel' datatype='real' name='[Calculation5]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='if [Parameters].[Parameter 2] = 1 then WINDOW_SUM(SUM([newin_7]*[numitems]), 0, 0)&#10;elseif [Parameters].[Parameter 2] = 0 then WINDOW_SUM(SUM([markdown]*[numitems]), 0, 0)&#10;else 0&#10;end' scope-isolation='false'>
            <table-calc ordering-type='Rows' />
          </calculation>
        </column>
        <column caption='Counts_all' datatype='real' name='[Calculation_7970814111018179]' role='measure' type='quantitative'>
          <calculation class='tableau' formula='WINDOW_SUM(SUM([numitems]), 0, 0)' scope-isolation='false'>
            <table-calc ordering-type='Rows' />
          </calculation>
        </column>
        <column-instance column='[Calculation5]' derivation='User' name='[usr:Calculation5:qk]' pivot='key' type='quantitative'>
          <table-calc ordering-type='Rows' />
        </column-instance>
        <column-instance column='[Calculation_7970814111018179]' derivation='User' name='[usr:Calculation_7970814111018179:qk]' pivot='key' type='quantitative'>
          <table-calc ordering-type='Rows' />
        </column-instance>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <datasource-relationships>
    <datasource-dependencies datasource='greenplum.41866.548072407400'>
      <column datatype='string' name='[batch_week]' role='dimension' type='nominal'>
      </column>
      <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column-instance column='[batch_week]' derivation='None' name='[none:batch_week:nk]' pivot='key' type='nominal' />
      <column-instance column='[category]' derivation='None' name='[none:category:nk]' pivot='key' type='nominal' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <column-instance column='[retailername]' derivation='None' name='[none:retailername:nk]' pivot='key' type='nominal' />
      <column-instance column='[taxonomiccolour]' derivation='None' name='[none:taxonomiccolour:nk]' pivot='key' type='nominal' />
      <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
      </column>
      <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
      </column>
    </datasource-dependencies>
    <datasource-dependencies datasource='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
      <column datatype='string' name='[batch_week]' role='dimension' type='nominal'>
      </column>
      <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
      </column>
      <column-instance column='[batch_week]' derivation='None' name='[none:batch_week:nk]' pivot='key' type='nominal' />
      <column-instance column='[category]' derivation='None' name='[none:category:nk]' pivot='key' type='nominal' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <column-instance column='[retailername]' derivation='None' name='[none:retailername:nk]' pivot='key' type='nominal' />
      <column-instance column='[taxonomiccolour]' derivation='None' name='[none:taxonomiccolour:nk]' pivot='key' type='nominal' />
      <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
      </column>
      <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
      </column>
    </datasource-dependencies>
    <datasource-relationship source='greenplum.41866.548072407400' target='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
      <column-mapping>
        <map key='[greenplum.41866.548072407400].[none:batch_week:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:batch_week:nk]' />
        <map key='[greenplum.41866.548072407400].[none:category:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:category:nk]' />
        <map key='[greenplum.41866.548072407400].[none:country:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:country:nk]' />
        <map key='[greenplum.41866.548072407400].[none:retailername:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:retailername:nk]' />
        <map key='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:taxonomiccolour:nk]' />
      </column-mapping>
    </datasource-relationship>
    <datasource-relationship source='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)' target='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
      <column-mapping>
        <map key='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:batch_week:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:batch_week:nk]' />
        <map key='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:category:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:category:nk]' />
        <map key='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:country:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:country:nk]' />
        <map key='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:retailername:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:retailername:nk]' />
        <map key='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:taxonomiccolour:nk]' value='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:taxonomiccolour:nk]' />
      </column-mapping>
    </datasource-relationship>
  </datasource-relationships>
  <worksheets>
    <worksheet name='CondensedRatio'>
      <layout-options>
        <title>
          <formatted-text>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='trends 1' name='greenplum.41866.548072407400' />
            <datasource caption='trends 2 (no subcat filter)' name='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='greenplum.41866.548072407400'>
            <column caption='BinaryRatio' datatype='real' name='[Calculation_0970814164744604]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='if [Calculation1 1 1] &gt; 1 then [Calculation1 1 1] else 0 end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[batch_week]' role='dimension' type='nominal'>
            </column>
            <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column-instance column='[batch_week]' derivation='None' name='[none:batch_week:nk]' pivot='key' type='nominal' />
            <column-instance column='[category]' derivation='None' name='[none:category:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[retailername]' derivation='None' name='[none:retailername:nk]' pivot='key' type='nominal' />
            <column-instance column='[subcategory]' derivation='None' name='[none:subcategory:nk]' pivot='key' type='nominal' />
            <column-instance column='[taxonomiccolour]' derivation='None' name='[none:taxonomiccolour:nk]' pivot='key' type='nominal' />
            <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
            </column>
            <column caption='Subcategory' datatype='string' name='[subcategory]' role='dimension' type='nominal'>
            </column>
            <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_0970814164744604]' derivation='User' name='[usr:Calculation_0970814164744604:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[greenplum.41866.548072407400].[Calculation3 1 1]' ordering-type='Rows' />
              <table-calc field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation_7970814111018179]' ordering-type='Rows' />
              <table-calc field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation5]' ordering-type='Rows' />
              <table-calc field='[greenplum.41866.548072407400].[Calculation1 1 1]' ordering-type='Rows' />
              <table-calc field='[greenplum.41866.548072407400].[Calculation1]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
            <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:category:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:category:nk]' member='&quot;jeans&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:country:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;uk&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:retailername:nk]' filter-group='6'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;bhs&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;debenhams&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;house of fraser&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;john lewis&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;selfridges&quot;' />
            </groupfilter>
          </filter>
          <sort class='alphabetic' column='[greenplum.41866.548072407400].[none:retailername:nk]' direction='ASC' />
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:subcategory:nk]' filter-group='7'>
            <groupfilter function='level-members' level='[none:subcategory:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:taxonomiccolour:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[greenplum.41866.548072407400].[none:country:nk]</column>
            <column>[greenplum.41866.548072407400].[none:category:nk]</column>
            <column>[greenplum.41866.548072407400].[none:taxonomiccolour:nk]</column>
            <column>[greenplum.41866.548072407400].[none:retailername:nk]</column>
            <column>[greenplum.41866.548072407400].[none:subcategory:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='render-fold-reversed' value='true' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[greenplum.41866.548072407400].[none:retailername:nk]' value='292' />
            <format attr='border-style' data-class='subtotal' scope='cols' value='none' />
            <format attr='border-style' data-class='subtotal' scope='rows' value='none' />
          </style-rule>
          <style-rule element='field-labels-decoration'>
            <format attr='text-orientation' value='-90' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[greenplum.41866.548072407400].[none:batch_week:nk]' value='false' />
            <format attr='font-size' field='[greenplum.41866.548072407400].[none:retailername:nk]' value='12' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='subtotal' scope='cols' value='none' />
            <format attr='border-style' data-class='subtotal' scope='rows' value='none' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#cde5bc' />
            <format attr='fill-below' id='refline0' value='#ebd1d1' />
            <format attr='stroke-color' id='refline0' value='#000000' />
            <format attr='line-pattern' id='refline0' value='dashed' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='none' />
            <format attr='line-pattern' scope='rows' value='none' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[greenplum.41866.548072407400].[none:subcategory:nk]' value='Possible subcategories&#10;' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[greenplum.41866.548072407400].[none:subcategory:nk]' />
              <size column='[greenplum.41866.548072407400].[usr:Calculation_0970814164744604:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[greenplum.41866.548072407400].[none:retailername:nk]</rows>
        <cols>[greenplum.41866.548072407400].[none:batch_week:nk]</cols>
        <join-lod-include-overrides>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[category]</column>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[country]</column>
        </join-lod-include-overrides>
        <show-full-range>
          <column>[greenplum.41866.548072407400].[batch_date]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Counts_all'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='0'>Product counts </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='trends 1' name='greenplum.41866.548072407400' />
            <datasource caption='trends 2 (no subcat filter)' name='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='1' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='1.0'>
              <calculation class='tableau' formula='1.0' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='greenplum.41866.548072407400'>
            <column caption='Counts_all_subcat' datatype='real' default-format='p0.00%' name='[Calculation1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='WINDOW_SUM(SUM([numitems]), 0, 0)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Counts_sel_subcat' datatype='real' default-format='p0.00%' name='[Calculation3 1 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='if [Parameters].[Parameter 2] = 1 then WINDOW_SUM(SUM([newin_7]*[numitems]), 0, 0)&#10;elseif [Parameters].[Parameter 2] = 0 then WINDOW_SUM(SUM([markdown]*[numitems]), 0, 0)&#10;else 0&#10;end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[batch_week]' role='dimension' type='nominal'>
            </column>
            <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column-instance column='[batch_week]' derivation='None' name='[none:batch_week:nk]' pivot='key' type='nominal' />
            <column-instance column='[category]' derivation='None' name='[none:category:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[retailername]' derivation='None' name='[none:retailername:nk]' pivot='key' type='nominal' />
            <column-instance column='[subcategory]' derivation='None' name='[none:subcategory:nk]' pivot='key' type='nominal' />
            <column-instance column='[taxonomiccolour]' derivation='None' name='[none:taxonomiccolour:nk]' pivot='key' type='nominal' />
            <column caption='Numitems' datatype='real' name='[numitems]' role='measure' type='quantitative'>
            </column>
            <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
            </column>
            <column caption='Subcategory' datatype='string' name='[subcategory]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[numitems]' derivation='Sum' name='[sum:numitems:qk]' pivot='key' type='quantitative' />
            <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation3 1 1]' derivation='User' name='[usr:Calculation3 1 1:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <datasource-dependencies datasource='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)'>
            <column caption='Counts_sel' datatype='real' name='[Calculation5]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='if [Parameters].[Parameter 2] = 1 then WINDOW_SUM(SUM([newin_7]*[numitems]), 0, 0)&#10;elseif [Parameters].[Parameter 2] = 0 then WINDOW_SUM(SUM([markdown]*[numitems]), 0, 0)&#10;else 0&#10;end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Counts_all' datatype='real' name='[Calculation_7970814111018179]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='WINDOW_SUM(SUM([numitems]), 0, 0)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
            </column>
            <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation5]' derivation='User' name='[usr:Calculation5:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_7970814111018179]' derivation='User' name='[usr:Calculation_7970814111018179:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:category:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:category:nk]' member='&quot;jeans&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:country:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;uk&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:retailername:nk]' filter-group='6'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;bhs&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;debenhams&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;house of fraser&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;john lewis&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;selfridges&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:subcategory:nk]' filter-group='7'>
            <groupfilter function='level-members' level='[none:subcategory:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='computed' column='[greenplum.41866.548072407400].[none:subcategory:nk]' direction='ASC' using='[greenplum.41866.548072407400].[sum:numitems:qk]'>
          </sort>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:taxonomiccolour:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[greenplum.41866.548072407400].[none:country:nk]</column>
            <column>[greenplum.41866.548072407400].[none:category:nk]</column>
            <column>[greenplum.41866.548072407400].[none:taxonomiccolour:nk]</column>
            <column>[greenplum.41866.548072407400].[none:retailername:nk]</column>
            <column>[greenplum.41866.548072407400].[none:subcategory:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[greenplum.41866.548072407400].[none:batch_week:nk]' value='71' />
            <format attr='display' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' scope='rows' value='false' />
            <format attr='subtitle' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' scope='rows' value='true' />
            <format attr='display' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' scope='rows' value='false' />
            <format attr='render-fold-reversed' value='true' />
            <format attr='display' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='title' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' scope='rows' value='Expected: Counts (all)' />
            <format attr='subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' scope='rows' value='true' />
            <format attr='subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' scope='rows' value='true' />
            <format attr='display' class='0' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' field-type='quantitative' fold='true' scale='log' scope='rows' synchronized='true' type='space' />
            <format attr='title' class='0' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' scope='rows' value='Observed: Counts(newin/markdown)' />
            <format attr='width' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' value='64' />
            <format attr='width' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' value='64' />
            <format attr='width' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' value='64' />
            <format attr='width' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' value='64' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
          </style-rule>
          <style-rule element='header'>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-style' scope='cols' value='none' />
            <format attr='border-style' data-class='subtotal' value='none' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[greenplum.41866.548072407400].[none:batch_week:nk]' value='-90' />
            <format attr='text-format' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' value='N' />
            <format attr='text-format' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' value='N' />
            <format attr='text-format' field='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]' value='N' />
            <format attr='text-format' field='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]' value='N' />
            <format attr='display' field='[greenplum.41866.548072407400].[none:batch_week:nk]' value='false' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[Parameters].[Parameter 1]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#cacaca</color>
                <color>#b5b5b5</color>
                <color>#a1a1a1</color>
                <color>#8d8d8d</color>
                <color>#797979</color>
                <color>#646464</color>
                <color>#505050</color>
                <color>#3c3c3c</color>
                <color>#282828</color>
                <color>#141414</color>
                <color>#000000</color>
              </color-palette>
            </encoding>
            <encoding attr='color' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' max='0.0' min='0.0' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#000000</color>
                <color>#212121</color>
                <color>#434343</color>
                <color>#656565</color>
                <color>#868686</color>
                <color>#a8a8a8</color>
                <color>#cacaca</color>
                <color>#a8a8a8</color>
                <color>#868686</color>
                <color>#646464</color>
                <color>#434343</color>
                <color>#212121</color>
                <color>#000000</color>
              </color-palette>
            </encoding>
            <encoding attr='color' field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' max='0.0' min='0.0' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#000000</color>
                <color>#212121</color>
                <color>#434343</color>
                <color>#656565</color>
                <color>#868686</color>
                <color>#a8a8a8</color>
                <color>#cacaca</color>
                <color>#a8a8a8</color>
                <color>#868686</color>
                <color>#646464</color>
                <color>#434343</color>
                <color>#212121</color>
                <color>#000000</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-color' value='#000000' />
            <format attr='border-width' value='1' />
            <format attr='border-style' value='none' />
            <format attr='border-style' data-class='subtotal' value='none' />
            <format attr='border-style' data-class='total' value='none' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='stroke-color' id='refline0' value='#000000' />
            <format attr='line-pattern' id='refline0' value='dashed' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='cols' value='solid' />
            <format attr='line-pattern' scope='rows' value='solid' />
          </style-rule>
          <style-rule element='header-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='solid' />
          </style-rule>
          <style-rule element='title'>
            <format attr='border-style' value='none' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[greenplum.41866.548072407400].[none:country:nk]' value='Country&#10;'>
              <formatted-text>
                <run>Country&#10;</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='17'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Line' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#820000' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1539' />
                <format attr='maxwidth' value='1539' />
                <format attr='minheight' value='216' />
                <format attr='maxheight' value='216' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='26' y-axis-name='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#820000' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1539' />
                <format attr='maxwidth' value='1539' />
                <format attr='minheight' value='294' />
                <format attr='maxheight' value='294' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='27' y-axis-name='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#820000' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1539' />
                <format attr='maxwidth' value='1539' />
                <format attr='minheight' value='216' />
                <format attr='maxheight' value='216' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='30' y-axis-name='[greenplum.41866.548072407400].[usr:Calculation1:qk:1]'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[greenplum.41866.548072407400].[none:subcategory:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#820000' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1539' />
                <format attr='maxwidth' value='1539' />
                <format attr='minheight' value='216' />
                <format attr='maxheight' value='216' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='31' y-axis-name='[greenplum.41866.548072407400].[usr:Calculation3 1 1:qk]'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[greenplum.41866.548072407400].[none:subcategory:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#820000' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1539' />
                <format attr='maxwidth' value='1539' />
                <format attr='minheight' value='216' />
                <format attr='maxheight' value='216' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([greenplum.41866.548072407400].[usr:Calculation1:qk:1] + ([trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk] + ([greenplum.41866.548072407400].[usr:Calculation3 1 1:qk] + [trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk])))</rows>
        <cols>[greenplum.41866.548072407400].[none:batch_week:nk]</cols>
        <join-lod-include-overrides>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[category]</column>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[country]</column>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[retailername]</column>
          <column>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[taxonomiccolour]</column>
        </join-lod-include-overrides>
        <percentages enabled='true' mode='row' />
      </table>
    </worksheet>
    <worksheet name='Ratio'>
      <table>
        <view>
          <datasources>
            <datasource caption='trends 1' name='greenplum.41866.548072407400' />
            <datasource caption='trends 2 (no subcat filter)' name='trends_master_weekly (ds.trends_master_weekly) (demo) (copy)' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='greenplum.41866.548072407400'>
            <column caption='Ratio' datatype='real' default-format='p0.00%' name='[Calculation1 1 1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='if([Calculation3 1 1]&gt;[Parameters].[Parameter 3]) then (([Calculation3 1 1]/[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation5])/([Calculation1]/[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation_7970814111018179]))&#10;else 0&#10;end' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[batch_week]' role='dimension' type='nominal'>
            </column>
            <column caption='Category' datatype='string' name='[category]' role='dimension' type='nominal'>
            </column>
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
            </column>
            <column-instance column='[batch_week]' derivation='None' name='[none:batch_week:nk]' pivot='key' type='nominal' />
            <column-instance column='[category]' derivation='None' name='[none:category:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[retailername]' derivation='None' name='[none:retailername:nk]' pivot='key' type='nominal' />
            <column-instance column='[subcategory]' derivation='None' name='[none:subcategory:nk]' pivot='key' type='nominal' />
            <column-instance column='[taxonomiccolour]' derivation='None' name='[none:taxonomiccolour:nk]' pivot='key' type='nominal' />
            <column caption='Retailername' datatype='string' name='[retailername]' role='dimension' type='nominal'>
            </column>
            <column caption='Subcategory' datatype='string' name='[subcategory]' role='dimension' type='nominal'>
            </column>
            <column caption='Taxonomiccolour' datatype='string' name='[taxonomiccolour]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation1 1 1]' derivation='User' name='[usr:Calculation1 1 1:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation_7970814111018179]' ordering-type='Rows' />
              <table-calc field='[greenplum.41866.548072407400].[Calculation3 1 1]' ordering-type='Rows' />
              <table-calc field='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[Calculation5]' ordering-type='Rows' />
              <table-calc field='[greenplum.41866.548072407400].[Calculation1]' ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:category:nk]' filter-group='8'>
            <groupfilter function='member' level='[none:category:nk]' member='&quot;jeans&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:country:nk]' filter-group='3'>
            <groupfilter function='member' level='[none:country:nk]' member='&quot;uk&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:retailername:nk]' filter-group='6'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;bhs&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;debenhams&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;house of fraser&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;john lewis&quot;' />
              <groupfilter function='member' level='[none:retailername:nk]' member='&quot;selfridges&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:subcategory:nk]' filter-group='7'>
            <groupfilter function='level-members' level='[none:subcategory:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:taxonomiccolour:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[greenplum.41866.548072407400].[none:retailername:nk]</column>
            <column>[greenplum.41866.548072407400].[none:taxonomiccolour:nk]</column>
            <column>[greenplum.41866.548072407400].[none:subcategory:nk]</column>
            <column>[greenplum.41866.548072407400].[none:category:nk]</column>
            <column>[greenplum.41866.548072407400].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' scope='rows' value='Ratio: Expected/Observed' />
            <format attr='subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' scope='rows' value='true' />
            <format attr='width' field='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' value='64' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' value='N' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='stroke-color' id='refline0' value='#000000' />
            <format attr='line-pattern' id='refline0' value='dashed' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[greenplum.41866.548072407400].[none:subcategory:nk]' />
            </encodings>
            <reference-line axis-column='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' formula='average' id='refline0' label='Expected=Observed' label-type='custom' scope='per-pane' value-column='[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]' z-order='1' />
          </pane>
        </panes>
        <rows>[greenplum.41866.548072407400].[usr:Calculation1 1 1:qk:1]</rows>
        <cols>[greenplum.41866.548072407400].[none:batch_week:nk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Trends Analysis'>
      <style>
        <style-rule element='dash-subtitle'>
          <format attr='background-color' value='#00000000' />
        </style-rule>
        <style-rule element='dash-container'>
          <format attr='border-style' id='dash-zone_6' value='none' />
        </style-rule>
        <style-rule element='parameter-ctrl'>
          <format attr='font-size' value='12' />
          <format attr='background-color' value='#ffffff' />
        </style-rule>
        <style-rule element='parameter-ctrl-title'>
          <format attr='font-size' value='12' />
        </style-rule>
      </style>
      <zones>
        <zone h='100000' id='34' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='43377' id='19' name='Counts_all' w='87735' x='12265' y='0'>
          </zone>
          <zone fixed-size='291' h='74928' id='6' is-fixed='true' param='vert' type='layout-flow' w='12265' x='0' y='0'>
            <zone fixed-size='110' h='18154' id='22' is-fixed='true' name='Counts_all' param='[greenplum.41866.548072407400].[none:country:nk]' type='filter' w='12265' x='0' y='0'>
            </zone>
            <zone fixed-size='52' h='8928' id='23' is-fixed='true' name='Counts_all' param='[greenplum.41866.548072407400].[none:category:nk]' type='filter' w='12265' x='0' y='18154'>
            </zone>
            <zone fixed-size='65' h='10863' id='25' is-fixed='true' name='Counts_all' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='filter' w='12265' x='0' y='27082'>
            </zone>
            <zone fixed-size='49' h='8482' id='26' is-fixed='true' name='Counts_all' param='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' type='filter' w='12265' x='0' y='37945'>
            </zone>
            <zone fixed-size='51' h='8779' id='27' is-fixed='true' name='Counts_all' param='[greenplum.41866.548072407400].[none:retailername:nk]' type='filter' w='12265' x='0' y='46427'>
            </zone>
            <zone fixed-size='81' h='13244' id='32' is-fixed='true' param='[Parameters].[Parameter 3]' type='paramctrl' w='12265' x='0' y='55206'>
              <formatted-text>
                <run fontsize='8'>Low statistics threshold</run>
              </formatted-text>
            </zone>
            <zone h='6478' id='35' name='CondensedRatio' pane-specification-id='0' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='color' w='12265' x='0' y='68450'>
            </zone>
          </zone>
          <zone h='31551' id='33' name='Ratio' w='87735' x='12265' y='43377'>
          </zone>
          <zone h='25072' id='30' name='CondensedRatio' w='100000' x='0' y='74928'>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows show-side-pane='false'>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Counts_all'>
      <cards>
        <edge name='left'>
          <strip size='270'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='27' param='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation5:qk]' type='color' />
            <card pane-specification-id='26' param='[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='50'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[greenplum.41855.572053194400 (copy)].[:Measure Names]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:Calculation_2550806181752437:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:category:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:country:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:facetbrand:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:newin_7:qk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:retailername:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:subcategory:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:taxonomiccolour:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[yr:batch_date:ok]</field>
          <field>[greenplum.41864.699977557900].[none:retailername:nk]</field>
          <field>[greenplum.41866.548072407400].[none:batch_week:nk]</field>
          <field>[greenplum.41866.548072407400].[none:subcategory:nk]</field>
          <field>[greenplum.41866.548072407400].[none:week:qk]</field>
          <field>[greenplum.41866.548072407400].[none:year:qk]</field>
          <field>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[none:batch_week:nk]</field>
          <field>[trends_master_weekly (ds.trends_master_weekly) (demo) (copy)].[usr:Calculation_7970814111018179:qk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='CondensedRatio'>
      <cards>
        <edge name='left'>
          <strip size='270'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='50'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Parameter 4]</field>
          <field>[greenplum.41855.572053194400 (copy)].[:Measure Names]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:Calculation_2550806181752437:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:category:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:country:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:facetbrand:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:newin_7:qk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:retailername:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:subcategory:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[none:taxonomiccolour:nk]</field>
          <field>[greenplum.41855.572053194400 (copy)].[yr:batch_date:ok]</field>
          <field>[greenplum.41864.699977557900].[none:retailername:nk]</field>
          <field>[greenplum.41864.699977557900].[twk:batch_date:ok]</field>
          <field>[greenplum.41864.699977557900].[twk:batch_date:qk]</field>
          <field>[greenplum.41866.548072407400].[none:batch_week:nk]</field>
          <field>[greenplum.41866.548072407400].[none:subcategory:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Ratio'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[greenplum.41866.548072407400].[none:batch_week:nk]</field>
          <field>[greenplum.41866.548072407400].[none:subcategory:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='1' name='Trends Analysis'>
      <active id='30' />
      <zones>
        <zone name='Counts_all'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[greenplum.41864.699977557900].[none:subcategory:nk]</field>
            </color-one-way>
          </highlight>
        </zone>
        <zone mode='radiolist' name='Counts_all' param='[greenplum.41866.548072407400].[none:country:nk]' type='filter' />
        <zone mode='dropdown' name='Counts_all' param='[greenplum.41866.548072407400].[none:category:nk]' type='filter' />
        <zone mode='checkdropdown' name='Counts_all' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='filter' values='relevant' />
        <zone mode='checkdropdown' name='Counts_all' param='[greenplum.41866.548072407400].[none:taxonomiccolour:nk]' type='filter' values='relevant' />
        <zone mode='checkdropdown' name='Counts_all' param='[greenplum.41866.548072407400].[none:retailername:nk]' type='filter' values='relevant' />
        <zone mode='slider' name='' param='[Parameters].[Parameter 3]' type='paramctrl' />
        <zone name='CondensedRatio' pane-specification-id='0' param='[greenplum.41866.548072407400].[none:subcategory:nk]' type='color' />
        <zone name='Ratio'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <selection-collection>
            <node-selection select-tuples='false'>
              <oriented-node-reference orientation='horizontal'>
                <node-reference>
                  <fields>
                    <field>[greenplum.41866.548072407400].[none:batch_week:nk]</field>
                  </fields>
                  <multibucket>
                    <bucket>&quot;2013.45&quot;</bucket>
                  </multibucket>
                </node-reference>
                <page-reference>
                </page-reference>
              </oriented-node-reference>
            </node-selection>
          </selection-collection>
        </zone>
        <zone name='CondensedRatio'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
          <highlight>
            <color-one-way>
              <field>[greenplum.41864.699977557900].[none:subcategory:nk]</field>
              <field>[greenplum.41866.548072407400].[none:subcategory:nk]</field>
            </color-one-way>
          </highlight>
        </zone>
      </zones>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='Counts_all' width='384'>
      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
      7pRdYQ5ljQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='CondensedRatio' width='384'>
      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
      AkAIIcQnktyvKYQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQ
      FiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQ
      FiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFiUBIIQQFjVmAIR2beO5l1b+m7/SYP0bT7KuNfgR
      TksIIUS2jRkAfa0beejJZf/mr1SsfmEJq7b0f4TTEkIIkW1jBoCGYt0z9/HFL36OL5/0YzZ3
      D/H8A3/h2COO5qhjvsKSZzcRH+7l0rNP5agjjuFrJ5/D5p2DkApzz/W/5ZiDD+Lbp11DTCle
      WnIznzvyGI465gTu/+c6BrubOOcH3+TThxzJD874A52haK7aLIQQgg8NAPB567ni+pv42jQH
      l115Db869+9cfutdXLv4W1x15eU8cvetrOqr5NZ77uQzkxNceedjqHiMmumLuO2eO0huvJtN
      u1o4++w7+d2Nt3L9RSfz1+uv5C/XXcGuCYdz9wN3MCW5mjsefzZHTRZCCAEfEgAGMG7/eTSO
      r+LAY46ko301LdUNzKgtZ+r8hdh6+1jT3kLBnDmMryhn//nzaN/WRtpVyIJFR1BRWUXlhDJG
      BrrZVl7L9LoKJs/dH/fgIC1tQ3zhUwdSUVHN/kccxsBQJEdNFkIIAf/CDGD726tZ17yTpx99
      iJpJs5nU2sQbTW2sfO1lRirKWVjfSPerS9nW2s7zry+nasoEdLsNp9sFmoama9jzypnesZ03
      Nu1k9dLXGCwsZNKEQp578jl2tu7ghReeIT+/MEdNFkIIAWAf60WPv4RKZ5irfvMbHBU1/Or8
      X9I1t5qLzz0Hm9vBeb8+i6Nml7K59XJ++5tzoLieC87+LK2vdJDId6NpOrUNUykIVHHZDT/g
      kot+i83l4Be/PJ2jp/q59vJL+c1vllFWfxi//NynctRkIYQQAJpSSo15hFKkUil0mw1d10Ep
      0qkU6Do2m+2dYwySyTQ2ux1d1z7wV6WTSZSmY7fb3vlrBqlUGrvDjqZ98N8TQgiReR8eAEII
      IT6R5F8CCyGERUkACCGERUkACCGERUkACCGERUkACCGERUkACCGERUkACCGERUkACCGERUkA
      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
      h9JSmD3b/FJmew/C4zGvOofeuSINBMy2V1Rmv7bTaQ5IwaC5Nu31wvTp5oZotvcAXC4w0tDd
      vXczurgYFh5o9kk22e3mZ6y9fe8Vv9sNhxxq9n82+13XzfYNDZozEbsdJkww916c7xOIGaQp
      tbun359SCsNIo+k29PfrBKVIGwa6rqON0UnKMDAU6Lo25nFCjKLU3qUPjye3dwHFYubyQyoF
      hUXmQJCL8FHKXBbo7zNDKD/frJ+LTdjddyD195tLIj4fFJeYg1Iu+j6Vgl3t5oasxwP1DXvv
      Qso2wzD3m1pazHoNDVBUnLva4WGz320284LDnf3P+4cGgBBCiE8m+YdgQghhURIAQghhURIA
      QghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIA
      QghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIAQghhURIA
      QghhURIAQghhUWMGgErHWfbUI9x19xKixnteNOL0B4dQKsnyZ//OXQ8+RiiayuKpCiGEyKQx
      A2C4awtXXPpH4jYH6j2vNT17G1fdvYzUUCsXXnsrkZQNXdeyeKpCCCEyyf6Br6g4D997N8u3
      6ByeTPLQNefx9KpNxJNFnHP5n/jH3Q/x8IYC8kN1bNzQxjFJJ00vP8AtDz5MT3eaI08+nR9+
      fi5P3H0Ndz6xDF/RdC659Dza3niIa//8MFRW8/NfnMX+k8flsLlCCCF2G2MG4GDBgQcx/YD9
      WNDg5oUWjV+ds5j9/Z3c+9w2DjtkLnOOPJYvH/9Zps/fjyMW1vL4yys56ms/50ff/BT33fIg
      HduX8Zu7lnPeRVeyf1GYxx95jp9dcicnnHYGJ8zzc8WlVzGYeO/akhBCiFz44BmAplNaVkxB
      SYD6iVPwJR7l6iuvoXt9M9MOVlSUF1IYrmR8dRVefx6l5eU0VFfw4O03YY/1EVZ1DHW2MX3u
      ImZPqmfauRfTvu4Zft/dwaP33oYtGUZzFBJPGuCUvWghhMi1Dx15NaB51TOsHvRw7vnn8/kF
      k0lGYqBgJNRNNGlu/MaDrdz7xHN866dn87OTTiAvHsOZX0zXli30Bgd45pbLefDFDqrG1XP6
      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
      qoi9kT4JfQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Ratio' width='384'>
      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
      lEtBu8WaHtaFDaUDUBKd0GUHzNR0ADdAGK4aABmz5DLeKB3gq1vYUv9UF/8HEukBAF3dU/D5
      K78U92WoIcVDPqrRZQd02YFMWJ6MlNZgkJApJbAUVEqZ+lkAXrDlud/QDsDeHUPKKlriw+4J
      aP1wMGaVcb6l7Yf3du3wtJiX5ASYMqvUADApk5+hNAwDa9asqfy3lBLMw6fAOUc2636XIaWE
      lBKZjHsHic6R7nMIIcAYC/W+onMk7xwAQr+vwj5HoOdDppCdO3d6ev1LL73k6fW9vb1yy5Yt
      oZ6jr69Pbt68OdRzDAwMyLfeeivUcwwODso333wz1HMMDw/LDRs2hHqON998Uw4ODoZ6jrfe
      ekv29/eHeo7NmzfLvr6+UM+xZcsW2dvbG+o5tm3bJt99991Qz7F9+3a5a9euUM+xc+dOuWPH
      jlDP8c4778ht27b5OkcicwAEQRBE+CQyB+AF0zSRz1tVF/l8HitXrsSnP/1pTJrUOCv/y1/+
      EqeeeioeffRRPPPMMzjqqKNw+eWXN3Q3TdPEgw8+iFNPPRV33nkncrkcLr30UnzgAx9oeI47
      7rgDCxcuxMKFC129DyklfvGLX6BQKEDTNLzyyiu45JJL8KEPfajh3/T19eGHP/whNmzYgNmz
      Z+OEE07AX//1Xzd8H1JKPP3003jyySdhmiZmzpyJSy+9FAcddJCra3SDEAL3338/NmzYgCuu
      uAL77bcf7r//fvzN3/xNw78ZHBzEI488gg9/+MP42c9+hrlz5+LLX/4yOjvVxetXrlyJJ598
      Eueeey7+4i/+AsuXL8cnP/lJ9PT0OL7eMAwsW7YMBx10EH7zm9+gWCzi+uuvx/Tp0x1fL6VE
      LperuPyPPPIIzjnnHPT09DR0zV9//XVMmjQJuq7jzjvvxJQpU3D11Vdjr732avg+nn/+eUya
      NAlr1qzBiy++iI9+9KM466yzGn7nf/zjH/HSSy/h8ssvR0eHu8d93bp1+NWvfoWPfOQjeOih
      h7Bo0SKcf/75Te+re++9F88++yyy2Sze//734/LLL2/42QLA5s2b8ZOf/AT9/f2YMGECTj/9
      dCxevNhTyKcVL7/8Mh544AGceuqp+MQnPoGnnnoKRx11FPbdd9+G7+Pxxx9HT08P1qxZgx07
      duCqq67CAQcc0PD1+Xy+UsG1bNkynH322ejp6WkYwtm+fTv6+/sxa9YsLF26FNlsFl/+8pcx
      d+7chu/jtddeQ39/P4aHh/HUU09h3rx5uPTSSxt+Vhs3bsSyZctw1VVXYeLE5j0D2RtvvPHG
      pq9IIJMnT668+c2bN+OUU07Bm2++iWeffRZPPPEEurq6MH/+/MrrZ82aVfMQ/su//AsWLlyI
      ZcuW4aabbsL//d//IZvNYs6cOQCAiRMnYsqUKZW/eeWVV7Bp0yasWbMGxx9/PD71qU/h3/7t
      33DyySc3PMePf/xjDA4O4rHHHsN+++2HffbZp+YL6+rqwtSpUyt/s3HjRvz+979HJpPBwMAA
      rrrqKvzoRz/CiSee2PAct9xyCy6++GLMmzcPhmFg9+7dmDhxYuV9TJgwAdOmTav8zebNm7Fi
      xQpce+21OOWUU3D44YfjjjvuwCc/+cmG57jjjjvw/e9/H08//TRWrFiBFStW4D3veQ9mzZpV
      Ocf06dMrf7N9+3Y8//zzOP/88/GNb3wDixYtwiOPPIJTTz214Tluu+02zJ8/H9/73vdw4403
      Ip/Po7e3F4ccckjlHDNmzKj8za9//Wt89atfxcqVKyvXlMlk8L73vc/xHJxz3HXXXbj22mvx
      gx/8ADNmzMCqVatw9NFHVzYK06ZNQ1dXV+U7+sUvfoFSqYQnn3wSp5xyChYvXowHH3wQxx57
      rOM5hBC48MIL8eijj2Lt2rVYvnw5du/ejYULF2LCBKt6aurUqZg4cWLlHCtXroSu63j44Ydx
      zTXX4Mgjj8R9992Hj3/8447nME0TP/jBD7Bo0SKsXLkS3/rWt/DLX/4Shx56KKZOtTR3pkyZ
      gu7u7so5XnrpJbz66qt46KGH0NHRgblz544xBPXv45ZbbsGpp56KpUuX4s4778SqVatw4IEH
      Ytq0aQCAnp4eTJo0qXKO3/72txBC4NJLL8WaNWtwyimnYNmyZTjuuOMafh//+I//iCuuuAJn
      nHEGjjvuODzyyCM45JBDKgZ28uTJNc/5K6+8gssuuwy/+93vKt/54OAgjjrqqIbv44477sDV
      V1+Nhx9+GIVCAW+88Qbmzp1bMbA9PT0153j++eexfv16rFu3Dvvvvz/OO+883HvvvTj++OMb
      3rtf+9rX8K//+q/YsGEDHn30UezYsQNHHXVUxfhNnjwZPT09lXO89tprWLduHZ566ilceuml
      +NjHPoa7774bixcvbvg+br31Vpx44ol49NFHceONN+KVV15BV1dXxZBNmjSpZqOxadMm/O53
      v8Py5cuh6zoOOeSQyj1Yf45UegDVX8Chhx6KX/3qV5WFbN9998VFF11U8/r6G17Xddx///0o
      FouYMGEC+vv70d092qpdv2Pbe++9sWXLFsybNw9vvvkmdF2veb3TOTo6OvC1r30NW7duxf33
      349bb70VN9xwAw477DDHc3R2dqKvrw+apsEwDOzZswe6ro85ZjVCCPT29qKvrw+GYaC7uxul
      0mhXrdM5hoeH0dvbi2nTpmHnzp2O113NZZddhldffRV33HFH5XfVx3U6x+DgIGbPno3bbrsN
      1113HWRdnUH9ORhjmDlzJm655RYcdNBBePrppzF79uya31fvqBYvXoynn34aV155JQ488MDK
      axqdgzFW+SxvvfVWXHvttdi5c2fN6+t3bIwxdHZ24utf/zpmzpyJ119/fcxrqs+RzWbx05/+
      FHfddRemT58OwzBw0003NT1HNpvF448/jj179qCjowMDAwPo6qqtia8+RyaTQTabxZ49e1Ao
      FPD222+jr6+vxtt12nmedNJJ+OhHP4rHHnsMf/u3f4vFixfjc5/7XMPPyjRNbNq0CZqmYWBg
      AO+++27NAlJ/js7OTuzYsQPDw8Po7+9HT08PNK1WDqP+HIwx7NixA11dXRgaGsLIyEjTcxx1
      1FE45phjcNppp+HII4+sHKfZOQCgWCziO9/5Dr7+9a/jrbfewumnn17zeVbDGIOUEl/5ylcg
      pcSePXvGfJb157j11lvx05/+FPl8HosWLcLNN99cc13158hkMnj66acriduRkZGmzyBjDFOm
      TMHmzZshpcSWLVuwZcuWpu8DAP7yL/8SF1xwAZ544gl89atfxZFHHokvfWm0stI+RyqqgNzA
      Oce///u/Y9KkSbj44oubvjafz2PDhg3Ytm0bjj76aLz44os488wzm/7Nq6++iscffxx9fX04
      +OCDcckll1R2RE6sWLECZ5xxBgB3FQ1SSrz00kvQdR3Dw8N4/vnncdlllzV0PwFgaGgIP/rR
      jzBx4kR8/vOfxwsvvIDFixc3rQZ49dVXsWLFCgwMDOCggw7CBRdcgBkzZjR97yMjI+ju7oaU
      Eh0dHS3fx6pVq3DAAQfg4IMPxo4dO7BixQpceeWVDf8ml8vhxRdfxAknnIC+vj6sXLkSn/nM
      Z5pWQpRKJZimie7ubmQymZahgzfeeAO9vb1YuHAhNE3DT37yE1x00UUNwxSmaeLXv/41Tj75
      ZDDG8NBDD2HJkiVjDL/T+3/22Wfx8MMP44c//GHT13LOsXnzZrz66qtYuHAhnn32WZx++ulN
      Qyf9/f144IEHsGHDBkyfPh3nnHMO5s2b1/D169atQ2dnJw499NBKpUirz+qdd97B6tWr8f73
      vx8/+9nPcOKJJ+ITn/hE0/e8bNkyvP766zjvvPPQ39+PD3zgAw3DZfb7ePjhh7FlyxZMnToV
      n/rUpyoLeyMMw0CpVMKUKe7E1bZv345169bh5JNPhmma+M///E985jOfqdlc1L+PX/7yl/ir
      v/orZLNZPPbYYzj++OObhuRs1q5di1tuuQX33ntv089XCIFt27Zh7dq1eN/73of169dj4cKF
      2GeffRr+TT6fx0MPPYTXXnsNXV1dOPPMM7Fo0aKGr9+xYwfeffddLFiwoOV1p94A5PN5bN68
      GYC1kDz99NP4/Oc/3zCubVvRXM5q3Hj00Udx+umnY968eQ0f7kKhgE2bNgGwFp4VK1bg4osv
      bhq327JlC0ZGRgAAjz/+OE466SR86EMfapibKBaLeOuttwBYN/pjjz2GL3zhCzj44IMbnmPr
      1q0YHrZkB5544gl8/OMfx/z58zF5svOw6N27d2P16tWYP38+vv3tbyOTyeDcc8+tCTPVc889
      9+Diiy/Gf/zHf+CFF17ArFmzcMMNNzQ8R39/P1auXImPfOQjuPHGG8EYw1lnnVUTZqrn3nvv
      xfnnn4/77rsPzz33HPbee29861vfavigDw4O4vbbb8eWLVvAGMPee++Na665puGDDQBPPfUU
      li9fDsMwkM1mcdJJJ+Hss89uaCyHh4dx++23Y/PmzRUP5dprr20YPwaA3/zmN1i2bBl0XUc2
      m8UnPvEJnHvuuQ3Pkcvl8P3vfx+bNm0CYwwzZszA1Vdfjf3337/hOVauXImHH34YmqYhk8ng
      +OOPx/nnn9/wHIVCAd///vexceNGZDIZTJs2DVdddVXTvM+qVavw4IMPolQqIZPJ4KMf/Sg+
      //nPNzxHqVTCbbfdhjfffLNyjq985SuVEF49Ukrouj7GM6wOwdXDOYdh1CrHZrPZhnkiKSUM
      wxjTYDdhwoSG72M8niOVIaBqBgYG8MUvfhELFy7ErFmz8Pzzz2P+/PlNb/D//u//xrJly7Bk
      yRKsXr0akyZNwty5cxsagKGhof/X3XmGRXWte/w/DB1xAGGIFFGxAypgQ5AQk2PEFBNNOzEa
      DSJIME2TKGqMnpRji5oElCIiYhBLDCrSbIB0QUBAOkORcXQoM0OdmT3rfuDMvqLszcx5nvPc
      430/bt7Fb/aUtfb6v2UhKCgIbm5usLGxQV5eHlxdXVkXgKtXr+LUqVNYuXIlcnNzweVy4eDg
      wLgASKVSBAcHw8XFBePHj0deXh7c3NxYF4C0tDRERUXh3XffRW5uLiiKwvjx4xkn597eXlRX
      V6O6uho7d+6EjY0Ndu7cyboAFBcX44MPPkBjYyOioqKQnp6OzMzMIZr+k9bX14f79++jpaUF
      33zzDSZMmIDt27ezLgClpaVYuXIl7t+/j6ioKGRkZODmzZt48803h/W/ePEifH196QB7U1MT
      jh8/jpCQkGH95XI50tLScPjwYRgZGUEul+Pnn39Ge3s7Hct42hITE/Hyyy/TOnZbWxvCw8Ox
      a9euYf0VCgWSk5Pxyy+/wMjICAqFAvv374dIJKJjMk+betHesWMHOBwOhEIhIiIiwBSWUyqV
      SEpKwoEDB2BsbAylUomDBw+itbWV8fuelJSEBQsWICQkBBwOByKRCGFhYdizZw8j49KlS9i3
      bx9MTEzouINAIMDEiROHHZOcnAx3d3ds27YNHA4Hjx49wu+///6MBKY2lUqFLVu2oKWlhd7h
      6uvrIyQkBJaWlsOOqaiogJ+fH+bNm0cvEp6envj73/8+rD8hBFu3bkVdXR393ujq6iIkJITx
      abuqqgpr164dwpg/fz5jAgMhBDt37kRFRQX9O+Vyudi2bRvjg0JtbS3WrFmDuXPn0ow5c+Y8
      I1s/aXv27MHdu3fpBVVHRwdbt26FjY3NsP4NDQ1YvXo1XF1d6V307NmzsX79+md8n/sFwM7O
      DikpKTh69Ch4PB48PDxo6WU443A4+OyzzzB37lwkJSXBwcEBgYGBdBBtOBs7diyuXr2KY8eO
      wczMDPPnzx9RMgoMDISbmxsuXbqEcePGISAgABYWFoz+1tbWSEpKQkREBHg8HubMmYO3336b
      leHn54fZs2fjzz//xLhx4+Dv78/6FKyvr4/s7GwQQuDk5ASRSDSiHMDn87F9+3YIBALIZDLc
      uHEDH330EaO/np4eCgoKoKOjAwcHB8hkshHbHFhZWWHHjh1oaGiATCbDtWvXsGLFCkb/iRMn
      4vz58xCLxeByucjPz2eVD3R1daFQKJCQkABbW1u0t7dDKBQyLpQA4OjoiHPnzqGrqwu6uroo
      LCzE1KlTGf25XC5UKhXOnDkDe3t7dHR0oLm5mVWucHR0xOnTp9Hd3Q1dXV0UFRVh8uTJrAwA
      iI+Px7hx49DV1YXGxkZWqWXSpEk4fvw4+vr6oKenh7t379JxKCaGrq4u4uPj4eDgAIlEgpqa
      Gtbv7qRJk3D06FEoFAro6emhtLSU9cGFy+Viz549+OWXX/D9999rVPTk4uKCTZs2YcqUKazy
      h9p0dHTw3Xff4cCBA/j+++81yoCaMWMGvTvy8vLSiLF9+3bs3bsXu3fv1ogxdepUbNmyBXw+
      Hz4+PiP6czgcbN26FT/99BN2796tUWbcpEmT8M0338DU1HRIosqw//95l4DURgjB9evXIZfL
      4evrq1E6mUQiwdGjR/HFF1+wbj+fZNy6dQvd3d14/fXXNWJIpVIcO3YMn3766ZDMCTbG7du3
      IRaL8dZbb2nEkMlkCA8Px4YNG2BqasqarqdUKiEWi0EIQVdXF+zt7VknKZVKhf7+fjQ1NcHO
      zg4CgQDOzs4jMtrb20FRFKRSKWxtbVkXWJVKhYGBAQgEAtjb26OhoQEuLi6sDIFAgMLCQlAU
      hZkzZ2LGjBms75VcLkdWVhaEQiEsLCzg5eU14nvV1NSEgoICUBQFZ2dn1vtWM7Kzs/HgwQOY
      m5vDy8sLo0ePZmW0tLQgPz8fSqUSTk5OcHZ2Zo3hyOVy5OTkoLW1FWZmZvDy8gKPx2NltLa2
      Ii8vDwqFAjNmzMDMmTNZGQqFArm5uWhubgaPx4OXlxfMzMxYGW1tbcjNzYVcLsf06dMxa9as
      EStTKYqiYxLqaWik+JI6jqGJ/38zQ6VSgcvl/t8ztCofew5MIpGQY8eOaTXm3LlzpKGhQWN/
      mUxGQkNDtWJcvHiR1NTUaOzf09NDfvvtN60Yly9fJpWVlRr79/f3kyNHjmjFSE5OJmVlZRr7
      y+VycujQIa0Y6enppLi4WGP/uro6cuHCBa0YYWFhRCqVauwvEAhIQkKCVozw8HCtqoubm5vJ
      H3/8oRUjMjJSq+ri1tZWEhcXpxXj+PHjWlX+CoVCEhsbqxUjJiZGq8pfkUhEYmJitGLExsZq
      1UXg8ePHJDo6WivG6dOnSWtrq8b+7e3tJDIyUitGfHy8Vp0Kurq6SHh4+LB/+3+xA1BLDN3d
      3ZDJZLCysnom7/VJI/9aHTkcDtra2mBqajok75+N0dPTA4lEAj6frxVj1KhRQ/L+mcYQQtDb
      24uuri6tGGpJQ1NGX18fOjo6YG1tzcoA/vfpo62tDcbGxkNqCzRh8Pn8Z9IbmRhCoRBGRkYY
      PXq0RtJAX18fKIqCoaGhxoVOHR0dMDU1HTGjSW3qjKP/JGNgYIBOL36eGXK5HP39/TA2NtaK
      of68NWEoFAr09vbCxMREa4aOjo5GPXPUDGNjY40LErVlKJVKdHdEUiCsAAAXJ0lEQVR3w8TE
      RCuGqakpuFyuRgyKoiCTyRgZz30MQCqVYtu2bXRmwejRo+Hm5saqU//1119ITEyk30ipVIpf
      f/2VMf1OJpMhJCQEFEVBLpeDx+PBxcWFNXBz5coVXLhwgZY+enp6cPDgQUa9tqenByEhIZDL
      5VAoFDAzM8O0adOGDdyoLSUlBQkJCRg9ejQ94e7du5cxba2vrw8hISHo6+ujK4EnTpyIwMBA
      RkZaWhr++OMP8Hg8UBSF/v5+/Pjjj4yxhv7+fmzfvp2ukDQ3N8e4ceOG5CA/bTdu3EBsbCx4
      PB4UCgUUCgV2797NGOS6e/cuMjIyAIDOV1cHCIcziqIQHR1NV4xfuXIF7777Lj7++GPGSsnS
      0lLcvHkTACAQCNDd3Q0/Pz94eHgwMmJiYujMrytXruCdd97BmjVrGAP/5eXluHbtGgCgpaUF
      HR0d8PPzY9SfKYrCqVOn0NXVRTNWrlyJ1atXM353KysrkZaWBmAwkP3w4UOsX79+SLHZk6ZS
      qRAXF4eOjg6asWLFCqxevZpRKqyurkZycjIAQCQSobm5GevXr2dMHVWpVPjjjz/oPPsrV67g
      7bffxkcffcSYWl1bW4ukpCQAgFgsRl1dHfz9/RkTGNTxmEePHtGMt956C6tWrWJMe25oaMCl
      S5cADCaXVFZWwt/fH0uWLBnWnxCCs2fPQigU0ozly5dj1apVjDGTpqYmXLw4eMytVCpFSUkJ
      NmzYgKVLlzIy1AVmwGDAfenSpVi9ejVjwLylpQUXLlwAMDivFBYWwt/ff0jtgNqe+15ApaWl
      WLZsGdasWYN33nkHBw4cQG1tLaM/IQSFhYWIiorCCy+8gIMHD+L9999HSUkJ45jKykosXrwY
      fn5+eOutt7B//3469ZTJcnNzacahQ4ewatUq3L17l9G/pqYGnp6edHXk/v370dLSwsrIysoa
      wvj4449RVFTE6F9fXw93d3cEBwfD19cXe/fufaYg6mnLyMhAVFQUrK2tcfjwYaxfvx537txh
      9G9uboaTkxO++OILvPLKK9i7dy/9I2SyW7duITw8HNbW1jhy5AgCAwNRUFDA6M/n81FaWgoL
      Cwu4urpi5syZjCmHwGCwzsDAAOXl5fD29oatrS1efPFF1qdHPp+PsrIy8Hg8uLu7w9nZmTV4
      qqOjAyMjI5SVlWHRokWwtbWFj48P6+6Kz+fj3r17GDVqFObOnQsnJyfWILCOjg6MjY1RWloK
      T09PmsG2u+Lz+aioqICRkRHmzZuH6dOnD6mYfto4HA5MTExQUlICDw8P2Nra4qWXXmJtKcDn
      81FZWQkDAwMsWLAA06ZNw7Rp01gZpqamKC4uxoIFC2gGW42FlZUVqquroaurCw8PD0yZMoW1
      FQuHwwGPx0NRURHmzZsHW1tbLF68mLVFzJgxY1BXVwcOhwNPT09MnjwZTk5OjP7AYAX5nTt3
      MGfOHJrBllxgbm6OxsZGqFQqeHl5wdHRkbWOQz2msLAQ7u7usLOzw+LFi1lrRczMzNDc3Ay5
      XA5vb2+MHz+euaWMVuLTf6G1t7eTTz75hMhkMkJRFDl69Cg5fvw4o79KpSInT54ksbGxRKlU
      EqFQSFatWsWq1XZ2dhI/Pz/S2dlJKIoikZGRjJqa2k6fPk2io6OJUqkkIpGIrF69mrVLo0Qi
      If7+/kQsFhOKokhMTMyIcYaEhAQSERFBlEolefz4MVmzZg2rjiqTyciGDRvIw4cPCUVRJC4u
      jhw+fJiVceHCBRIWFkaUSiXp6Ogga9euZe1u2NPTQwIDA8mDBw8IRVHkzJkz5MCBA6yMxMRE
      8uuvvxKlUkm6urrIunXrSHNzM+sYuVxOIiMjyZo1a0hiYiKrLyGDn3tdXR3ZvHkzef/990f0
      VzOio6PJunXryPnz5zViNDY2ks2bN5N33nlHI4ZCoSAnT54kfn5+JD4+XiOGQCAgW7ZsIStW
      rNCYERcXR/z9/cnJkyc1YjQ3N5Ovv/6aLF++XCOGUqkk8fHxJCAgQCNNW6VSkdbWVvLNN9+Q
      119/XWPG2bNnycaNG0lYWJhGjLa2NrJ161bi6+urEYOiKHLhwgXy6aefjvjbUDOEQiHZtm0b
      WbJkCVGpVBox/vrrL7Jp0yayb98+jRgikYhs376dvPrqq2RgYEAjxuXLl8nnn39OfvzxR0a/
      534BIGTwZtVvfF9fn8ZjCBn8cSgUiv84Qy6X/0cZSqXy/w1Dky+42qqqqrQK7A0MDJDs7GyN
      /QkhpKamRquWvnK5nNy+fVsrRm1trVYtfZVKJcnKytKKUV9fr1XwkKIokpGRoRWjsbFRqzbn
      /w6jqalJqzbn/w6jpaVFqzbnaoYmC4DaHjx4oFViCEVRJDMzk/6taGJtbW2kqqqK8e/PfRBY
      JBLRWq3a7OzsGHVU8q9UTpFINOT6kiVLGHW7x48f4/r160Ou2djYMOqowKB0otYG1fbKK68w
      6nbt7e1IT08fcs3a2pq1BD8rK4vWBtW2ePFixkKXzs5OpKamDrnG5/OHNKJ62rKzs5+Ronx8
      fBgLXSQSCa0Hq83S0hKvvPIKIyM3NxdNTU1Drnl7ezPGAKqqqp6R7FxcXBi36xRF4fLly0P6
      JKk7UDLJJzU1NSguLh5yzcnJibHegKIoJCUlobf3f08D09fXx7Jlyxjlk7q6umfkNHUKJRMj
      OTmZrmIHBusuli1bxiifNDQ0PCOnTZ06Fa6ursP6q1QqJCcn07EMYLCOwtfXl1HaEAgEyMvL
      G3Jt8uTJcHd3Z2SkpqZCIpHQ17hcLnx9fRmljebmZuTk5Ay55ujoiLlz5zIy0tPT0dnZOYSx
      dOlSxlhGa2srbt++PeTahAkTGDv6EkKQnp5Ox0uAQZlu6dKljGnPbW1tyMzMHHLNwcGBMbZE
      /pXe/mRfIg6Hg1dffZUxnvjw4UPcunVryDV7e/shzfno1zvsf3iOzMjICOfOnYNCoYClpSUs
      LS1H7BXS19eH8+fP0/6WlpaserChoSEuXryIvr4+2p8trx0YzIY4c+bMEAZbpN/AwACXLl2C
      TCaj/dl6DQGDE8Lp06e1Yly9ehWdnZ0aMwAgNjZ2CINN19bX10daWhrEYrFWjJMnT2rMMDQ0
      xIkTJ2BiYkL7s2m7HA4H9fX1yM/Pp/3HjBnDmkVhZGSEEydOwMjISGOGQCBAdnY27W9hYcHK
      MDY2xokTJ2BoaEiPYdOPdXR00NzcjMzMTI3vw8TEBCdOnICBgYFGDHXW2s2bN4cw2DKy1Aw9
      PT2NGSKRCOnp6UM+85EYMTEx0NXVpf3ZdHAOhwOxWIyUlBSN78PY2BixsbHgcrkaMYDBtiRJ
      SUka34eRkRFOnz4NABrPVzKZDImJiRrPV0ZGRjhz5gwoihqZofFe4r/YHjx4oNUpOiqViqSm
      pmolNQiFQlJYWKgVIy0tjfT392s8RiQSkfz8fK0Y6enpGssshAzmNufm5mrsT8hgXn5vb6/G
      /u3t7VrLLNeuXdOKUVJSMmKc4ElTKpUkKSlJq9dUVlamlZyhVCrJ1atXtZIBKioqtJIz1Axt
      ZICqqiqtpYbk5GStGDU1NeT+/ftaM5RKpcZj6uvrSUVFhVaMlJQUjSRetTU2NmpV5/LvMJqb
      m0lJSYnG/ur5ShP5VW2tra0a1dI8l+cBPGnkXxWtmZmZyM7Oprt1sq3CFEWhvr4eKSkpKC8v
      h7m5+YiVjhKJBFlZWcjOzoZYLNaI0djYiJSUFNy7dw9mZmYwNzcfkZGdnY2srCy6Hz4bQ6VS
      DWGMHj0aFhYWrAypVIqcnBxkZWVBJBJhwoQJrE8TKpUKAoEAycnJKCsrw6hRozBmzJgRGbm5
      ucjMzIRQKNSI0dzcjOTkZJSUlNBP9mwM9RNkQUEBlEol7OzsWHPI+/r6UFFRgfT0dNTV1cHG
      xmZI3/zhGI8ePcK1a9dQUFCAgYEBjBs3jpXR399PM2pra2FjY8Na/U0IoeXF/Px89Pf3w97e
      npUxMDCAyspKpKeno6amBi+88MKQnvYjMXp7ezW6j6qqKqSlpaG6ulojhlgsxs2bN5GXl4ee
      nh6MGzeOdWcyMDCA6upqpKamoqqqCtbW1kP65g/H6OjowI0bN5CXl4fu7m44ODiMWDVdXV2N
      tLQ0VFZWgs/nj1j93dnZiVu3biE3NxdSqXREhkKhQG1tLVJTU1FRUaExIyMjAzk5Oejq6sL4
      8eO1YqgViJEY6jmxo6ODcb567iWghoYG/POf/8T06dPh6emJzs5O/Pzzz4z+hBD88MMPaG9v
      h6enJ6ZOnYp9+/ZBIBAwjmlqasKPP/6IqVOnwtPTE1KpFD/88APr6/r555/x6NEjeHp6Yvr0
      6Th06BBreuqDBw+wZ88eTJ48GV5eXujt7cXu3btZGXv37oVQKKQZv//+OyorKxn9RSIRdu3a
      BUdHR3h5eUEul+O7775jZRw4cAAtLS3w9PSEk5MTwsPDUVpayugvFouxY8cOTJgwAV5eXiCE
      YMeOHayMI0eOoKGhAQsXLoSzszOio6NZU03T0tJw8eJFuLu7Y968eSgsLERsbCyjv0qlwubN
      m2FsbAxvb2+6v5G6LmA4u3HjBhISEuDm5ob58+ejrKwM0dHRrIyvv/4aBgYG8Pb2xtixY7Fj
      xw66W+twlpWVhbi4OLi6umL+/PmoqKhAZGQkK+Pbb78Fl8ul01m/++47ui5gOMvLy8OJEydo
      RnV1NY4ePcrKUDfV8/b2hr29PXbt2oX29nbGMUVFRYiIiMCsWbOwYMEC1NfXIzQ0lNFf/Z1Q
      KpVYtGgRHBwc8P333+Px48eMY0pLSxEaGkqfCyAQCHDkyBFWxs6dOzEwMAAvLy9MnDgRe/bs
      wcOHDxnHlJeX4/Dhw3BxcYGHhwdaW1tx6NAhVsauXbvQ29sLLy8vTJo0Cf/4xz9YU6urqqpw
      8OBBODk5YeHChRCJRNi/fz8rY8+ePZDJZPDy8sLkyZPx008/obW1lXFMXV0d9u3bR8+J7e3t
      2Lt377C+z30hWEdHB2bNmgVXV1fo6enhhRdeQHl5OeuY/v5++Pj4YMyYMaAoCvfv34dYLGbM
      Je/q6oKzszPc3Nygp6eHsWPHstYNAIOdN318fGBpaQmKolBTUwOxWMyYgy2RSDB9+nS4ublB
      X18fNjY2rDn9wGDl80svvQQrKyt6xzHcIRZqk0qlmDJlCtzd3aGvrw87Ozvk5+ezMqRSKT74
      4APw+XxQFIWWlhZWRk9PDxwdHeHu7g4DAwPY29sjOzublSGRSLB8+XLY2NhApVJBKBSyMh49
      egRvb2+6p42JiQmuXr3K6E9RFExMTODh4YFRo0ahv78fWVlZ6O/vZ9R41Qx1Txsej4fz58+z
      MgwNDbFw4UKYmpqiv78f2dnZ6OvrY4yBiEQiLFq0iGaYmZkhISGBkaFSqaCvrw9PT0+MHj0a
      AwMDyM3NRW9vL2Nx08OHD+Hl5UUzLCwsaA2aicHlcuHp6Qkej4eBgQHk5+ejp6eHMYFBKBTS
      DC6XizFjxuDUqVOsDA6HQ/cYksvlKCwshEwmY0xgEIlE8PDwoBmWlpY4ceIEKwMAFi1aBHNz
      c8jlchQVFUEqlTJ2Z1WfFzF79mxwuVxYWVkhKiqKkUEIAUVR8Pb2hrm5ORQKBUpKStDV1cXY
      0lssFsPd3Z3u1Mnn8xEREcHIAAZ3AC+++CIsLCygUChQVlaGjo4O+jCkp629vR2urq70nGht
      bY2wsLBhfZ/7LCCKohAbG4vCwkIolUrweDwEBARg0qRJjGMaGhoQHh6Ozs5O6OrqYvbs2fD3
      92ftRR4XF4eCggK6Etjf35+1O6RAIMDRo0dpxsyZM7FhwwbWHt7x8fF0Qy0ejwc/Pz/WYpeW
      lhaEhoaio6MDXC4Xzs7OCAgIYJRbVCoVEhIScPv2bbpqWn2kJJO1tbXht99+Q3t7O7hcLmbM
      mIHAwEDGYLNKpcL58+eRmZmJgYEBmJqaYu3ataxnGwuFQvz+++94/Pgxfabsxo0bGQPBPT09
      CA0NRUNDAwghsLa2xldffcXaFTMnJwdnz55FT08PDA0NsXTpUixbtozxM+/t7UVYWBjq6upA
      CIGVlRU2b97MenhOfn4+zpw5g+7ubhgYGGDJkiV44403GBn9/f0IDQ1FXV0dKIqClZUVvvzy
      S8aJFgDu3LlDdxA1MDDAyy+/zNo0UC6XIzQ0FDU1NXRQ8IsvvmA9gKS4uBhxcXHo7u6Gvr4+
      fHx8sHLlSkaGQqFAWFgYqqqqQFEUxowZg88++4xxogUGn+hjY2Mhk8mgp6eHRYsW4f3332dl
      hIeHo6KigmYEBweznp1QXl6OmJgYSKVS6OnpYeHChfjwww9Zz/6OjIzEvXv36Er5oKAg1tby
      9+/fR3R0NCQSCXR1dbFgwQKsXr2alREdHY2SkhIolUqYm5tj48aNrN1Tq6urERUVRTPmzp2L
      tWvXsjJOnjyJoqIiKJVKmJmZISAgYNhCxud+B6B+E+zt7REUFARjY2NcunSJdQFQHzH43nvv
      4eWXX0ZOTg5aWloYP2j1aV62trYICgqCiYkJEhMTWRcAHR0d6OrqYuXKlViyZAkKCgrQ1NTE
      uMtQM2xsbBAYGAgej4eLFy+yLgDqIwLffvttLF26FEVFRWhsbGStJuVwOBg7dizdnvrChQus
      CwCHw4GOjg7efPNNvPbaaygtLUV9fT1jpaf6Pvh8PgICAmBlZYXz58+zLgDqLoevvfYa3nzz
      TZSXl6OmpobxdakXUTc3N6xduxZ9fX3Izs7GsmXLWBlGRkZYv349nJ2dcfnyZbqfDBtj9uzZ
      WLduHRQKBW7evIk33niDlWFoaIh169Zh5syZSEpKQnd3N2MGhprh4uKCTz75BBRF4fr164zn
      IACD76/6BDhXV1ckJydDIpEwLn5qhpOTE/z8/OjURbZ25urK6Q8//BBz5sxBamoqOjs7GdOk
      1Yxp06bRD1JpaWkaMd577z3MmzcP165dQ3t7O+Pip2ZMmTIFGzZsAJfLRUpKCusCwOFwoK+v
      j7Vr18LDwwM3b97E48ePGRc/9Vzi6OiIgIAA6Onp4erVq6wLgPro0DVr1sDT0xMZGRkQiUSM
      adLq+5gwYQICAwOhr6+PpKQk1gVAR0cHenp6WLVqFby9vZGVlYW2tjbGe1czHBwcsHHjRhga
      GuLy5cvDLgDPfQygrKwMAwMD8PX1xaZNm9DV1fVMvvCTRghBVFQUAgMDkZOTg3PnzqGqqopV
      crh//z4kEgneeOMNBAcHj8gAgIiICAQEBKCoqIg+wu/p2oMnra6uDo8ePcLy5cvx2WefobOz
      c0Tp5NixYwgICMC9e/dw8uRJ1NXVPVN78KQ1NTWhubkZK1aswOeff46Ojg6NGBs2bEBNTQ2O
      Hz+OhoYGVv3xwYMHqK2txXvvvYevvvoKYrH4mdzqpy0iIgLr1q1DU1MTjh07Rr9OJktMTISb
      mxvGjh2LkJAQdHd3P5Oz/6RRFIWzZ88iODgYv/76K4qLi1FQUDCkLuBpS0pKgrOzM8aNG4et
      W7fSPVXYGGfOnMGmTZsQGhqKwsJC3LlzB319fYxjkpOTMXXqVDg6OuLbb79Fd3c3awsMlUqF
      +Ph4BAcHIzIyEnl5eSguLh5Se/C0paamYsKECZg+fTq+/vprjRinT59GcHAwYmJicPv2bdy9
      e3dI7cHTdv36ddjZ2WHWrFnYsmULZDIZq7SoUqlw6tQpBAUFIT4+HhkZGSgtLWWNl6hTX+fO
      nYuvvvoKUqn0mdqDpxmxsbEICgrCn3/+iWvXrqGsrGxI7cHTlpubi1GjRmHhwoX48ssvIZFI
      WBmEEMTExCAoKAhXrlxBcnIy7t27N6T24GkrKCiAnp4efHx88Pnnn0MikSA3N5eVER0djY0b
      NyI9PR2XL19GRUXFkNqDp+3u3bugKAp/+9vf6DmRifE/xGnEGlTDQdEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Trends Analysis' width='384'>
      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
      F7Jo0aLTtrGvWrWKJesP02PAyIivGTx4MD/99BMvvvgi06dP59JLL+X222/nxRdfrEiRrKoq
      CxcupGXLlnTp0uW05nYqevfujSRJrFixooqQORVHjhzh+++/p29G/YyWrW80btyYJ598kgcf
      fJBvv/2Wt956i6+++oqvv/6ajh07MnnyZP74xz8iSRKTJk3is88+o0OHDsyfP7/GxWVMAdQj
      QqEQGzZsYMyYMRw6dAij0Uj79u1r1Yekt9Cvd7c6mmHDIBgMMnnyZPbv388rr7zCkCFDKp4L
      Bf18+8O8iPu6vGs6HdtkMmPGDJYuXcpDDz3EqFGjsFojS2tQzr59+7jpppuYeOdfsKqR7ULM
      WninYbVaef7557nxxhu54447eOutt/jPf/7DjBkzuOGGG1i5ciV5eXk88MADUfX+qUznzp1J
      S0tjzZo1tToH+PLLL3E6nbQddmpvtxjHMJvNXHfddYwddxmbt29izpw5fPPNN0x/9UX+Nfuf
      NGrUiCNHjjD66ouZPXs2CQkJuBQH8fqqHn8xBVBPOHr0KHPnzkUIwbp16wC4+eabz/GsGh5C
      CGbMmMF3333H9ddfz5133hmVfjt27Mi9997LSy+9xKxZs3jooYcivtbtdnPzzTdz9OhRhlmM
      DHWWRHSdbIiDSr4z3bp1Y8mSJcydO5eHH36YW265hS+++AKz2VxRca6uiI+Pp3v37qxbt46S
      kpJT5uWHcODdBx98gM1m46qrrmL3D6dXeKqwJIeta/8Tcfum3bvRvWfmaY1V3zhwKItCt50r
      b7yWK2+s2by3add2AGxmGxf1HVnxuM/viSmA+kJ6ejq33347c+bMYcqUKSxfvpzCwsJa7wBi
      nJylS5fy7LPP0qFDB958880zLmVYjiRJPP7443z00Ue88MIL3HzzzRFV2goGg0ycOJH169fz
      0EMPMWzoMESh67TnYTKZuPPOOxkzZgx33303n332GQBt2rSpcNesKwYPHswPP/zA9u3bGTly
      5Cnbb9++nV9++YXbbruNtNRUIje8VcXuKIr4/ABAaWSi+2mOVRPbd69FC0YWCNa80UAy2h4z
      d3X0uWlXGrkHkj696hlCXFEW6ftXRXStKb4RVFIAwaAvpgDqC3q9nsTERPLz81m7di2//PIL
      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
    </thumbnail>
  </thumbnails>
</workbook>
